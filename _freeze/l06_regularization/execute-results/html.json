{
  "hash": "a45ba8673db2aa0a9da998c68a34ee26",
  "result": {
    "engine": "knitr",
    "markdown": "---\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n::: {.content-visible unless-format=\"revealjs\"}\n# Regularization and Penalized Models\n:::\n::: {.content-visible when-format=\"revealjs\"}\n# IAML Unit 6: Regularization and Penalized Models\n:::\n\n##  Learning Objectives\n\n- Subsetting approaches: Forward, Backward, Best Subset (covered in reading only)\n- Cost and Loss functions\n  - What are they and how are they used\n  - What are the specific formulas for linear model, logistic regression, and variants of glmnet (ridge, LASSO, full elasticnet)\n- What is regularization\n  - What are its benefits?\n  - What are its costs?\n- How does lambda affect bias-variance trade-off in glmnet\n- What does alpha do?\n- Feature engineering approaches for dimensionality reduction: PCA (covered in reading only)\n- Other algorithms that do feature selection/dimensionality reduction: PCR and PLS (covered in reading only)\n- Contrasts of PCA, PCR, PLS, and glmnet/LASSO for dimensionality reduction (covered in reading only)\n\n-----\n\n## Introduction to Penalized/Regularized Statistical Algorithms\n\n### Overview\n\nComplex (e.g., flexible) models increase the chance of overfitting to the training set.  This leads to:\n\n- Poor prediction\n- Burdensome prediction models for implementation (need to measure lots of predictors)\n- Low power to test hypothesis about predictor effects\n\nComplex models are difficult to interpret\n\n-----\n\nRegularization is technique that:\n\n- Reduces overfitting\n- Allows for p >> n (!!!)\n- May yield more interpretable models (LASSO, Elastic Net)\n- May reduce implementation burden (LASSO, Elastic Net)\n\n-----\n\nRegularization does this by applying a penalty to the parametric model coefficients (parameter estimates)\n\n- This constrains/shrinks these coefficients to yield a simpler/less overfit model\n- Some types of penalties shrink the coefficients to zero (feature selection)\n\nWe will consider three approaches to regularization\n\n- L2 (Ridge)\n- L1 (LASSO)\n- Elastic net\n\nThese approaches are available for both regression and classification problems and for a variety of parametric statistical algorithms\n\n-----\n\n### Cost functions\n\nTo understand regularization, we need to first explicitly consider **loss/cost functions** for the parametric statistical models we have been using.\n\n- A **loss function** quantifies the error between a single predicted and observed outcome within some statistical model.  \n\n- A **cost function** is simply the aggregate of the loss across all observations in the training sample.\n\nOptimization procedures (least squares, maximum likelihood, gradient descent) seek to determine a set of parameter estimates that minimize some specific cost function for the training sample.\n\n-----\n\nThe cost function for the linear model is the mean squared error (squared loss): \n\n- $\\frac{1}{n}\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}$\n\n- No constraints or penalties are placed on the parameter estimates ($\\beta_k$)\n\n- They can take on any values with the only goal to minimize the MSE in the training sample\n\n-----\n\nThe cost function for logistic regression is log loss:\n\n- $\\frac{1}{n}\\sum_{i = 1}^{n} -Y_ilog(\\hat{Y_i}) - (1-Y_i)log(1-\\hat{Y_i})$\n\n- where $Y_i$ is coded 0,1 and $\\hat{Y_i}$ is the predicted probability that Y = 1\n\n- Again, no constraints or penalties are placed on the parameter estimates ($\\beta_k$)\n\n- They can take on any values with the only goal to minimize the sum of the log loss in the training sample\n\n![](figs/unit5_log_loss.png){height=5in}\n\n-----\n\n## Intuitions about Penalized Cost Functions and Regularization \n\nThis is an example from a series of wonderfully clear lectures in a [machine learning course](https://www.youtube.com/watch?v=PPLop4L2eGk&list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN) by Andrew Ng in Coursera.\n\n- [Regularization: The Problem Of Overfitting](https://www.youtube.com/watch?v=u73PU6Qwl1I)\n- [Regularization: Cost Functions](https://www.youtube.com/watch?v=KvtGD37Rm5I)\n\n-----\n\nLets imagine a training set:\n\n- House sale price predicted by house size\n- True DGP is quadratic.  Diminishing increase in sale price as size increases\n- N = 5 in training set\n\n\n![](figs/unit5_ng1.png){height=5in}\n\n-----\n\nIf we fit a linear model with size as the only feature...\n\n- $\\hat{sale\\_price_i} = \\beta_0 + \\beta_1 * size$\n\n- In this training set, we might get the model below (in blue)\n\n- This is a biased model (predicts too high for low and high house sizes; predicts too low for moderate size houses)\n\n- If we took this model to new data from the same quadratic DGP, it would clearly not predict very well\n\n![](figs/unit5_ng2.png){height=5in}\n\n-----\n\nLets consider the other extreme\n\n- If we fit a 4th order polynomial model using size...\n- $\\hat{sale\\_price_i} = \\beta_0 + \\beta_1 * size + \\beta_2 * size^2 + \\beta_3 * size^3 + \\beta_4 * size^4$\n- In this training set, we would get the model below (in blue)\n- This is model is overfit to this training set.  It would not predict well in new data from the same quadratic DGP\n- Also, the model would have high variance (if we estimated the parameters in another N = 5 training set, they would be very different)\n\n![](figs/unit5_ng3.png){height=5in}\n\n-----\n\nThis problem with overfitting and variance isn't limited to polynomial regression.\n\n- We would have the same problem (perfect fit in training with poor fit in new val data) if we predicted housing prices with many features when the training N = 5.  e.g.,\n\n- $\\hat{sale\\_price_i} = \\beta_0 + \\beta_1 * size + \\beta_2 * year\\_built + \\beta_3 * num\\_garages + \\beta_4 * quality$\n\n-----\n\nObviously, the correct model to fit is a second order polynomial model with size\n\n- $\\hat{sale\\_price_i} = \\beta_0 + \\beta_1 * size + \\beta_2 * size^2$\n- But we couldn't know this with real data because we wouldn't know the underlying DGP\n- When we don't know the underlying DGP, we need to be able to consider potentially complex models with many features in some way that diminishes the potential problem with overfitting/model variance\n\n![](figs/unit5_ng4.png){height=5in}\n\n-----\n\nWhat if we still fit a fourth order polynomial but changed the cost function to penalize the absolute value of $\\beta_3$ and $\\beta_4$ parameter estimates?\n\n**Typical cost based on MSE/squared loss:**\n\n- $\\frac{1}{n}\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}$\n\n**Our new cost function:**\n\n- $[\\frac{1}{n}\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] +  [1000 * \\beta_3 + 1000 * \\beta_4]$\n\n-----\n\n$[\\frac{1}{n}\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [1000 * \\beta_3 + 1000 * \\beta_4]$\n\n- The only way to make the value of this new cost function small is to make $\\beta_3$ and $\\beta_4$ small\n\n- If we made the penalty applied to $\\beta_3$ and $\\beta_4$ large (e.g., 1000 as above), we will end up with the  parameter estimates for these two features at approximately 0.\n\n- With a sufficient penalty applied, their parameter estimates will only change from zero to the degree that these changes accounted for a large enough drop in MSE to offset this penalty in the overall aggregate cost function.\n\n-----\n\n$[\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + 1000 * \\beta_3 + 1000 * \\beta_4$\n\n- With this penalty in place, our final model might shift from the blue model to the pink model below.  The pink model is mostly quadratic but with a few extra \"wiggles\" if $\\beta_3$ and $\\beta_4$ are not exactly 0.\n\n![](figs/unit5_ng5.png){height=5in}\n\n-----\n\nOf course, we don't typically know in advance which parameter estimates to penalize. \n\n- Instead, we apply some penalty to all the parameter estimates (except $\\beta_0$)\n- This shrinks the parameter estimates for all the features to some degree\n- However, features that do reduce MSE meaningfully will be \"worth\" including with non-zero parameter estimates\n- You can also control the shrinkage by controlling the size of the penalty\n\n-----\n\nIn general, regularization produces models that: \n\n- Are simpler (e.g. smoother, smaller coefficients/parameter estimates)\n- Are less prone to overfitting\n- Allow for models with p >> n\n- Are sometimes more interpretable (LASSO, Elastic Net)\n\nThese benefits are provided by the introduction of some bias into the parameter estimates\n\nThis allows for a bias-variance trade-off where some bias is introduced for a big reduction in variance of model fit\n\n-----\n\nWe will now consider three regularization approaches that introduce different types of penalties to shrink the parameter estimates\n\n- L2 (Ridge)\n- L1 (LASSO)\n- Elastic net\n\nThese approaches are available for both regression and classification problems and for a variety of parametric statistical algorithms\n\nA fourth common regularized classification model (also sometimes used for regression) is the support vector machine (not covered in class but commonly used as well and easy to understand with this foundation)\n\nEach of these approaches uses a different specific penalty, which has implications for how the model performs in different settings\n\n-----\n\n## Ridge Regression\n\nThe cost function for Ridge Regression is:\n\n- $\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda\\sum_{j = 1}^{p} \\beta_j^{2}\\:])$\n\nIt has two components:\n\n- Inside the left brackets is the SSE from linear regression\n- Inside the right brackets is the **Ridge penalty**.  \n\nThis penalty:\n\n- Includes the sum of the squared parameter estimates (excluding $\\beta_0$).  Squaring removes the sign of these parameter estimates.\n- This sum is multiplied by $\\lambda$, a hyperparameter in Ridge regression.  Lambda allows us to tune the size of the penalty.\n- This is an application of the L2 norm (matrix algebra) to the vector of parameter estimates\n\n-----\n\n$\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda\\sum_{j = 1}^{p} \\beta_j^{2}\\:])$\n\n::: {.callout-important}\n# Question\nWhat will happen to a Ridge regression model's parameter estimates and its performance (i.e., its bias & variance) as lambda increases/decreases?\n:::\n\n::: {.fragment .uwred}\nAs lambda increases, the model becomes less flexible b/c its parameter estimates \nbecome constrained/shrunk.  This will increase bias but decrease variance for model \nperformance.\n:::\n\n-----\n\n$\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda\\sum_{j = 1}^{p} \\beta_j^{2}\\:])$\n\n::: {.callout-important}\n# Question\nWhat is the special case of Ridge regression when lambda = 0?\n:::\n\n::: {.fragment .uwred}\nThe OLS regression is a special case where lambda = 0 (i.e., no penalty is applied).  \n\nThis is the most flexible. It is unbiased but with higher variance than for non-zero values of lambda\n:::\n\n-----\n\nLets compare Ridge regression to OLS (ordinary least squares with squared loss cost function) linear regression\n\n- Ridge parameter estimates are biased but have lower variance (smaller SE) than OLS\n\n- Ridge may predict better in new data\n  - This depends on the value of $\\lambda$ selected and its impact on bias-variance trade-off in Ridge regression vs. OLS\n  - There does exist a value of $\\lambda$ for which Ridge predicts better than OLS in new data\n\n- Ridge regression (but not OLS) allows for p > (or even >>) than n\n\n- Ridge regression (but not OLS) accommodates highly correlated (or even perfectly multi-collinear) features \n\n- OLS (but not Ridge regression) is scale invariant\n  - You should scale (mean and standard deviation correct) features for use with Ridge regression\n\n-----\n\n$\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda\\sum_{j = 1}^{p} \\beta_j^{2}\\:])$\n\n::: {.callout-important}\n# Question\nWhy does the scale of the features matter for Ridge regression?\n:::\n\n::: {.fragment .uwred}\nFeatures with bigger SDs will have smaller parameter estimates.  Therefore they will be less affected by the penalty.\n\nUnless the features are on the same scale to start, you should standardize them for all applications (regression and classification) of Ridge (and also LASSO and elastic net).  You can handle this during feature engineering in the recipe.\n:::\n\n-----\n\n## LASSO Regression\n\nLASSO is an acronym for Least Absolute Shrinkage and Selection Operator\n\nThe cost function for LASSO Regression is:\n\n- $\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda\\sum_{j = 1}^{p} |\\beta_j|\\:])$\n\nIt has two components:\n\n- Inside the left brackets is the SSE from linear regression\n- Inside the right brackets is the **LASSO penalty**.  \n\nThis penalty:\n\n- Includes the sum of the absolute value of the parameter estimates (excluding $\\beta_0$).  The absolute value removes the sign of these parameter estimates.\n\n- This sum is multiplied by $\\lambda$, a hyperparameter in LASSO regression.  Lambda allows us to tune the size of the penalty.\n\n- This is an application of the L1 norm to the vector of parameter estimates\n\n-----\n\n### LASSO vs. Ridge Comparison\n\nWith respect to the parameter estimates: \n\n- LASSO yields sparse solution (some parameter estimates set to **exactly zero**)\n\n- Ridge tends to retain all features (parameter estimates don't get set to exactly zero)\n\n- LASSO selects one feature among correlated group and sets others to zero\n\n- Ridge shrinks all parameter estimates for correlated features \n\nRidge tends to outperform LASSO wrt prediction in new data.  There are cases where LASSO can predict better (most features have zero effect and only a few are non-zero) but even in those cases, Ridge is competitive.  \n\n-----\n\n### Advantages of LASSO\n\n- Does feature selection (sets parameter estimates to exactly 0)\n  - Yields a sparse solution\n  - Sparse model is more interpretable?\n  - Sparse model is easier to implement? (fewer features included so don’t need to measure as many predictors)\n\n- More robust to outliers (similar to LAD vs. OLS)\n\n- Tends to do better when there are a small number of robust features and the others are close to zero or zero\n\n-----\n\n### Advantages of Ridge\n\n- Computationally superior (closed form solution vs. iterative;  Only one solution to minimize the cost function)\n\n- More robust to measurement error in features (remember no measurement error is an assumption for unbiased estimates in OLS regression)\n\n- Tends to do better when there are many features with large (and comparable) effects (i.e., most features are related to the outcome)\n\n-----\n\n## Elastic Net Regression\n\nThe Elastic Net blends the L1 and L2 penalties to obtain the benefits of each of those approaches.\n\nWe will use the implementation of the Elastic Net in [glmnet](https://cran.r-project.org/web/packages/glmnet/glmnet.pdf) in R.  \n\nYou can also read additional [introductory documentation](https://cran.r-project.org/web/packages/glmnet/vignettes/glmnet.pdf) for this package\n\n-----\n\nIn the Gaussian regression context, the Elastic Net cost function is:\n\n- $\\frac{1}{n}([\\sum_{i = 1}^{n} (Y_i - \\hat{Y_i})^{2}] + [\\:\\lambda (\\alpha\\sum_{j = 1}^{p} |\\beta_j| + (1-\\alpha)\\sum_{j = 1}^{p} \\beta_j^{2})\\:])$\n\nThis model has two hyper-parameters\n\n- $\\lambda$ controls the degree of regularization as before\n- $\\alpha$ is a \"mixing\" parameter that blends the degree of L1 and L2 contributions to the aggregate penalty. (Proportion of LASSO penalty)\n  - $\\alpha$ = 1 results in the LASSO model\n  - $\\alpha$ = 0 results in the Ridge model\n  - Intermediate values for $\\alpha$ blend these penalties together proportionally to include more or less LASSO penalty\n\n-----\n\nAs before (e.g., KNN), best values of $\\lambda$ (and $\\alpha$) can be selected using resampling using `tune_grid()`\n\nThe grid needs to have crossed values of both `penalty` ($lambda$) and `mixture` ($alpha$) for glmnet\n\n  - Can use `expand_grid()`\n  - Only penalty is needed in grid if fitting a Ridge or LASSO model.\n\n-----\n\n\n## Empirical Example 1: Many \"good\" but correlated predictors\n\n\n\n\n\n\n\n\n\nFor the first example, we will simulate data with:\n\n- Many correlated predictors\n- All related to outcome\n- Get a small training sample\n- Get a big test sample (for more precise estimate of model performance)\n\n-----\n\nFirst we set the predictors for our simulation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_cases_trn <- 100\nn_cases_test <- 1000\nn_x <- 20\ncovs_x <- 50\nvars_x <- 100\nb_x <- rep(1, n_x) # one unit change in y for 1 unit change in x\ny_error <- 100\n```\n:::\n\n\n\n\n-----\n\nThen we draw samples from population\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\nmu <- rep(0, n_x)  # means for all variables = 0\nsigma <- matrix(covs_x, nrow = n_x, ncol = n_x)\ndiag(sigma) <- vars_x  \nsigma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n [1,]  100   50   50   50   50   50   50   50   50    50    50    50    50\n [2,]   50  100   50   50   50   50   50   50   50    50    50    50    50\n [3,]   50   50  100   50   50   50   50   50   50    50    50    50    50\n [4,]   50   50   50  100   50   50   50   50   50    50    50    50    50\n [5,]   50   50   50   50  100   50   50   50   50    50    50    50    50\n [6,]   50   50   50   50   50  100   50   50   50    50    50    50    50\n [7,]   50   50   50   50   50   50  100   50   50    50    50    50    50\n [8,]   50   50   50   50   50   50   50  100   50    50    50    50    50\n [9,]   50   50   50   50   50   50   50   50  100    50    50    50    50\n[10,]   50   50   50   50   50   50   50   50   50   100    50    50    50\n[11,]   50   50   50   50   50   50   50   50   50    50   100    50    50\n[12,]   50   50   50   50   50   50   50   50   50    50    50   100    50\n[13,]   50   50   50   50   50   50   50   50   50    50    50    50   100\n[14,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[15,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[16,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[17,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[18,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[19,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n[20,]   50   50   50   50   50   50   50   50   50    50    50    50    50\n      [,14] [,15] [,16] [,17] [,18] [,19] [,20]\n [1,]    50    50    50    50    50    50    50\n [2,]    50    50    50    50    50    50    50\n [3,]    50    50    50    50    50    50    50\n [4,]    50    50    50    50    50    50    50\n [5,]    50    50    50    50    50    50    50\n [6,]    50    50    50    50    50    50    50\n [7,]    50    50    50    50    50    50    50\n [8,]    50    50    50    50    50    50    50\n [9,]    50    50    50    50    50    50    50\n[10,]    50    50    50    50    50    50    50\n[11,]    50    50    50    50    50    50    50\n[12,]    50    50    50    50    50    50    50\n[13,]    50    50    50    50    50    50    50\n[14,]   100    50    50    50    50    50    50\n[15,]    50   100    50    50    50    50    50\n[16,]    50    50   100    50    50    50    50\n[17,]    50    50    50   100    50    50    50\n[18,]    50    50    50    50   100    50    50\n[19,]    50    50    50    50    50   100    50\n[20,]    50    50    50    50    50    50   100\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- MASS::mvrnorm(n = n_cases_trn, mu, sigma) |> \n  magrittr::set_colnames(str_c(\"x_\", 1:n_x)) |>\n  as_tibble()\ndata_trn_1 <- x |> \n  mutate(y = rowSums(t(t(x)*b_x)) + rnorm(n_cases_trn, 0, y_error)) |>  \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 100\nColumns: 21\n$ x_1  <dbl> -7.4799044, 1.0236917, 6.7326934, -14.9063964, 0.8889487, 6.11951…\n$ x_2  <dbl> -4.382765, -16.434199, -1.959195, 2.370728, -5.953006, 12.740186,…\n$ x_3  <dbl> -1.3926483, -11.8268783, 1.9367593, 6.3597281, -4.7341473, 13.669…\n$ x_4  <dbl> -1.4098139, -18.1013510, -0.4859097, -10.1016905, 4.9501196, 21.1…\n$ x_5  <dbl> -11.32152449, -6.57272989, 6.99237521, -4.05418224, -9.28203264, …\n$ x_6  <dbl> 0.4287849, 1.0753238, 7.7437722, 3.2533250, 4.9400340, 25.6213841…\n$ x_7  <dbl> -6.0659342, -2.3248026, -4.2596876, 1.5548678, -8.3378011, 18.483…\n$ x_8  <dbl> -11.7704021, -2.7225251, -2.9738809, 11.7014682, 4.7353163, 13.29…\n$ x_9  <dbl> -17.65256942, -16.75121020, 7.42850231, 2.93173355, 15.15289724, …\n$ x_10 <dbl> -3.7916335, -3.5774760, 4.3791349, 4.1647748, 1.8069956, 13.21176…\n$ x_11 <dbl> 1.7944916, 6.8024759, -5.6288959, 7.8606019, -11.4396013, 12.8486…\n$ x_12 <dbl> 7.2748185, 1.1123695, 5.4570129, 7.7298625, -8.4277385, 9.1001513…\n$ x_13 <dbl> 3.9636299, 1.0714662, 6.4823620, 9.2692615, -0.2841161, 19.649099…\n$ x_14 <dbl> -12.4510389, -19.6153036, -7.2578101, 9.0097406, -3.8630757, -0.9…\n$ x_15 <dbl> -18.423674, -4.868512, -4.172538, 13.451919, -8.647879, 18.845043…\n$ x_16 <dbl> -11.53843545, 0.26737312, -2.75900928, -0.03913761, -12.88983878,…\n$ x_17 <dbl> 3.7450353, -0.4135728, -10.8964534, 3.5617282, -16.3498259, 12.86…\n$ x_18 <dbl> -6.774703, -14.686612, 1.777447, 13.867454, -10.362955, 15.853674…\n$ x_19 <dbl> 3.9091399, 0.1744112, 11.4781208, 2.2775369, -6.0500447, 8.658232…\n$ x_20 <dbl> 8.487960, 3.556668, -4.175244, -4.545339, -13.653683, 9.542350, -…\n$ y    <dbl> -145.635298, 4.810920, -41.803024, 175.580620, 52.932735, 267.112…\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- MASS::mvrnorm(n = n_cases_test, mu, sigma) |> \n  magrittr::set_colnames(str_c(\"x_\", 1:n_x)) |>\n  as_tibble() \ndata_test_1 <- x |> \n  mutate(y = rowSums(t(t(x)*b_x)) + rnorm(n_cases_test, 0, y_error))\n```\n:::\n\n\n\n\n-----\n\nSet up a tibble to track model performance in train and test sets\n\n- We are using test to repeatedly to get rigorous held-out performance separate from model selection process.  \n- Just for our understanding \n- We would not choose a model configuration based on test set error\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_ex1 <- tibble(model = character(), \n                    rmse_trn = numeric(), \n                    rmse_test = numeric()) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 0\nColumns: 3\n$ model     <chr> \n$ rmse_trn  <dbl> \n$ rmse_test <dbl> \n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit a standard (OLS) linear regression\n\nFit the linear model\n\n- No feature engineering needed. Can use raw predictors as features\n- No resampling needed b/c there are no hyperparameters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_1 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(y ~ ., data = data_trn_1)\n\nfit_lm_1 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 5\n   term        estimate std.error statistic p.value\n   <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n 1 (Intercept)   -5.22      12.0    -0.436   0.664 \n 2 x_1           -1.26       1.71   -0.736   0.464 \n 3 x_2           -0.112      1.53   -0.0732  0.942 \n 4 x_3            0.780      1.43    0.545   0.588 \n 5 x_4            0.970      1.54    0.632   0.529 \n 6 x_5           -0.327      1.52   -0.215   0.830 \n 7 x_6           -0.325      1.67   -0.195   0.846 \n 8 x_7            0.896      1.75    0.512   0.610 \n 9 x_8            1.83       1.69    1.08    0.282 \n10 x_9            3.64       1.63    2.24    0.0282\n11 x_10           3.84       1.55    2.47    0.0155\n12 x_11           3.11       1.78    1.75    0.0845\n13 x_12           0.592      1.78    0.332   0.741 \n14 x_13           0.108      1.61    0.0669  0.947 \n15 x_14           1.15       1.46    0.787   0.434 \n16 x_15          -1.60       1.73   -0.922   0.359 \n17 x_16           1.75       1.87    0.935   0.353 \n18 x_17           3.17       1.64    1.93    0.0569\n19 x_18           1.35       1.67    0.811   0.420 \n20 x_19           1.53       1.51    1.01    0.315 \n21 x_20          -0.908      1.57   -0.580   0.564 \n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Overfit to train\n- Much worse in test\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(truth = data_trn_1$y, \n         estimate = predict(fit_lm_1, data_trn_1)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 91.86214\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(truth = data_test_1$y, \n         estimate = predict(fit_lm_1, data_test_1)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 112.3208\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n-----\n\n### Fit LASSO\n\nLASSO, Ridge, and glmnet all need features on same scale to apply penalty consistently\n\n- Use `step_normalize()`.  This sets mean = 0, sd = 1 (NOTE: Bad name as it does NOT change shape of distribution!)\n- Can use same recipe for LASSO, Ridge, and glmnet\n- Can use same train and test feature matrices as well\n  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_1 <- recipe(y ~ ., data = data_trn_1) |> \n  step_normalize(all_predictors())\n\nrec_prep_1 <- rec_1 |> \n  prep(data_trn_1)\n\nfeat_trn_1 <- rec_prep_1 |> \n  bake(NULL)\n\nfeat_test_1 <- rec_prep_1 |> \n  bake(data_test_1)\n```\n:::\n\n\n\n\n-----\n\nSet up splits for resampling for tuning hyperparameters\n\n- Use bootstrap for more precise estimation (even if more biased).  Good for selection\n- Can use same bootstrap splits for LASSO, Ridge, and glmnet\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20140102)\nsplits_boot_1 <- data_trn_1 |> \n   bootstraps(times = 100, strata = \"y\")  \n```\n:::\n\n\n\n\n-----\n\nNow onto the LASSO....\n\nWe need to tune $\\lambda$ (tidymodels calls this `penalty`)\n\n- $\\alpha$ = 1 (tidymodels calls this `mixture`)\n- Set up grid with exponential values for `penalty`\n- `glmnet` uses warm starts so can fit lots of values for $\\lambda$ quickly\n- Could also use `cv.glmnet()` directly in `glmnet` package to find good values.  See `get_lamdas()` in fun_modeling.R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_lasso <- expand_grid(penalty = exp(seq(-4, 4, length.out = 500)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_lasso_1 <- xfun::cache_rds(\n  expr = {\n  linear_reg(penalty = tune(), \n               mixture = 1) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_1, \n              resamples = splits_boot_1, \n              grid = grid_lasso, \n              metrics = metric_set(rmse))\n\n   },\n   rerun = rerun_setting,\n   dir = \"cache/006/\",\n   file = \"fits_lasso_1\")\n```\n:::\n\n\n\n\n-----\n\nEvaluate model performance in validation sets (OOB)\n\nMake sure that you have hit a clear minimum (bottom of U or at least an asymptote)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_lasso_1, hp1 = \"penalty\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best configuration (i.e., best lambda) to full train set\n\n- Use `select_best()`\n- Don't forget to indicate which column ($penalty$)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lasso_1 <-\n  linear_reg(penalty = select_best(fits_lasso_1)$penalty, \n             mixture = 1) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(fits_lasso_1): No value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nWe can now use `tidy()` to look at the LASSO parameter estimates\n\n- `tidy()`  uses `Matrix` package, which has conflicts with `tidyr`.  Load the package without those conflicting functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Matrix, exclude = c(\"expand\", \"pack\", \"unpack\"))\n```\n:::\n\n\n\n\n-----\n\nNow call `tidy()`\n\n- Notice that LASSO sets some $\\beta$ to 0 even though none are 0 in DGP\n- LASSO is not great at reproducing the DGP!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lasso_1 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoaded glmnet 4.1-8\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)  -41.2      10.8\n 2 x_1            0        10.8\n 3 x_2            0        10.8\n 4 x_3            4.89     10.8\n 5 x_4            6.63     10.8\n 6 x_5            0        10.8\n 7 x_6            0        10.8\n 8 x_7           10.7      10.8\n 9 x_8            9.46     10.8\n10 x_9           34.6      10.8\n11 x_10          32.0      10.8\n12 x_11          25.4      10.8\n13 x_12           3.23     10.8\n14 x_13           0.681    10.8\n15 x_14           8.38     10.8\n16 x_15           0        10.8\n17 x_16          14.5      10.8\n18 x_17          22.9      10.8\n19 x_18          13.4      10.8\n20 x_19           6.83     10.8\n21 x_20           0        10.8\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Somewhat overfit to train\n- Somewhat better in test \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex1 <- error_ex1 |> \n  bind_rows(tibble(model = \"LASSO model\",                       \n                   rmse_trn = rmse_vec(truth = feat_trn_1$y, \n                                       estimate = predict(fit_lasso_1,\n                                                          feat_trn_1)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_1$y, \n                                        estimate = predict(fit_lasso_1,\n                                                           feat_test_1)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     91.9      112.\n2 LASSO model      94.0      108.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit Ridge\n\nFit Ridge algorithm\n\n- Tune $\\lambda$ (`penalty`)\n- May need to experiment to get right range of values for lambda\n- $\\alpha$ = 0 (`mixture`)\n- Evaluate model configurations in OOB validation sets\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_ridge <- expand_grid(penalty = exp(seq(-1, 7, length.out = 500)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_ridge <- expand_grid(penalty = exp(seq(-1, 7, length.out = 500)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_ridge_1 <- xfun::cache_rds(\n  expr = {\n    linear_reg(penalty = tune(), \n               mixture = 0) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_1, \n              resamples = splits_boot_1, \n              grid = grid_ridge, \n              metrics = metric_set(rmse))\n\n  },\n  rerun = rerun_setting,\n  dir = \"cache/006/\",\n  file = \"fits_ridge_1\")\n```\n:::\n\n\n\n\n-----\n\nReview hyperparameter plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_ridge_1, hp1 = \"penalty\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best model configuration (i.e., best lambda) in full train set\n\n- Notice that no $\\beta$ are exactly 0\n- [Why are parameter estimates not near 1 for LASSO and Ridge?]{.red}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ridge_1 <-\n  linear_reg(penalty = select_best(fits_ridge_1)$penalty, \n             mixture = 0) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(fits_ridge_1): No value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\n```\n\n\n:::\n\n```{.r .cell-code}\nfit_ridge_1 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)   -41.2     276.\n 2 x_1             5.99    276.\n 3 x_2             6.87    276.\n 4 x_3             9.14    276.\n 5 x_4             9.00    276.\n 6 x_5             5.24    276.\n 7 x_6             8.53    276.\n 8 x_7            11.2     276.\n 9 x_8             9.12    276.\n10 x_9            14.0     276.\n11 x_10           14.5     276.\n12 x_11           13.5     276.\n13 x_12            7.14    276.\n14 x_13            7.97    276.\n15 x_14           10.2     276.\n16 x_15            7.47    276.\n17 x_16           10.3     276.\n18 x_17           12.5     276.\n19 x_18           11.8     276.\n20 x_19            7.70    276.\n21 x_20            4.57    276.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Much less overfit to train\n- Still not bad in test \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex1 <- error_ex1 |> \n  bind_rows(tibble(model = \"Ridge model\",   \n                   rmse_trn = rmse_vec(truth = feat_trn_1$y, \n                                       estimate = predict(fit_ridge_1,\n                                                          feat_trn_1)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_1$y, \n                                        estimate = predict(fit_ridge_1,\n                                                           feat_test_1)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     91.9      112.\n2 LASSO model      94.0      108.\n3 Ridge model      98.5      104.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit glmnet\n\nNow we need to tune both\n\n- $\\lambda$ (`penalty`)\n- $\\alpha$ (`mixture`)\n- Typical to only evaluate a small number of $alpha$\n- Warm starts across $\\lambda$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_glmnet <- expand_grid(penalty = exp(seq(-1, 7, length.out = 500)),\n                           mixture = seq(0, 1, length.out = 6))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_1 <- xfun::cache_rds(\n  expr = {\n    linear_reg(penalty = tune(), \n               mixture = tune()) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_1, \n              resamples = splits_boot_1, \n              grid = grid_glmnet, \n              metrics = metric_set(rmse))\n  \n  },\n  rerun = rerun_setting,\n  dir = \"cache/006/\",\n  file = \"fits_glmnet_1\")\n```\n:::\n\n\n\n\n-----\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet_1, hp1 = \"penalty\", hp2 = \"mixture\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best configuration in full train set\n\n- Can use `select_best()` for both hyperparameters, separately\n- Ridge was best (but cool that glmnet could determine that empirically!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_best(fits_glmnet_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(fits_glmnet_1): No value of `metric` was given; \"rmse\"\nwill be used.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  penalty mixture .config                \n    <dbl>   <dbl> <chr>                  \n1    276.       0 Preprocessor1_Model0414\n```\n\n\n:::\n\n```{.r .cell-code}\nfit_glmnet_1 <-\n  linear_reg(penalty = select_best(fits_glmnet_1)$penalty, \n             mixture = select_best(fits_glmnet_1)$mixture) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(fits_glmnet_1): No value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_1 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)   -41.2     276.\n 2 x_1             5.99    276.\n 3 x_2             6.87    276.\n 4 x_3             9.14    276.\n 5 x_4             9.00    276.\n 6 x_5             5.24    276.\n 7 x_6             8.53    276.\n 8 x_7            11.2     276.\n 9 x_8             9.12    276.\n10 x_9            14.0     276.\n11 x_10           14.5     276.\n12 x_11           13.5     276.\n13 x_12            7.14    276.\n14 x_13            7.97    276.\n15 x_14           10.2     276.\n16 x_15            7.47    276.\n17 x_16           10.3     276.\n18 x_17           12.5     276.\n19 x_18           11.8     276.\n20 x_19            7.70    276.\n21 x_20            4.57    276.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nA final comparison of training and test error for the four statistical algorithms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex1 <- error_ex1 |> \n  bind_rows(tibble(model = \"glmnet model\",   \n                   rmse_trn = rmse_vec(truth = feat_trn_1$y, \n                                       estimate = predict(fit_glmnet_1,\n                                                          feat_trn_1)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_1$y, \n                                        estimate = predict(fit_glmnet_1,\n                                                           feat_test_1)$.pred))))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(fits_glmnet_1): No value of `metric` was given; \"rmse\" will be used.\nNo value of `metric` was given; \"rmse\" will be used.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     91.9      112.\n2 LASSO model      94.0      108.\n3 Ridge model      98.5      104.\n4 glmnet model     98.5      104.\n```\n\n\n:::\n:::\n\n\n\n\n\n-----\n\n## Empirical Example 2: Good and Zero Predictors\n\nFor the second example, we will simulate data with:\n\n- Two sets of correlated predictors\n- First (smaller) set related to outcome (5 predictors)\n- Second (larger) set unrelated to outcome (15 predictors)\n- Get a small training sample\n- Get a big test sample (for more precise estimates of performance of our model configurations)\n\n-----\n\nSet up simulation parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_cases_trn <- 100\nn_cases_test <- 1000\nn_x <- 20\ncovs_x <- 50 \nvars_x <- 100\nb_x <- c(rep(1,5),rep(0, 15))\ny_error <- 100\n```\n:::\n\n\n\n\n-----\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmu <- rep(0, n_x)  \n\nsigma <- matrix(0, nrow = n_x, ncol = n_x)\nfor (i in 1:(n_x/2)){\n  for(j in 1:(n_x/2)){\n    sigma[i, j] <- covs_x\n  }\n} \nfor (i in (n_x/2 + 1):n_x){\n  for(j in (n_x/2 + 1):n_x){\n    sigma[i, j] <- covs_x\n  }\n} \n\ndiag(sigma) <- vars_x  \n```\n:::\n\n\n\n\n-----\n\nSimulate predictors and Y\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2468)\n\nx <- MASS::mvrnorm(n = n_cases_trn, mu, sigma) |> \n  magrittr::set_colnames(str_c(\"x_\", 1:n_x)) |>\n  as_tibble()\ndata_trn_2 <- x |> \n  mutate(y = rowSums(t(t(x)*b_x)) + rnorm(n_cases_trn, 0, y_error)) |>  \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 100\nColumns: 21\n$ x_1  <dbl> 6.6120448, -2.4315795, 10.0284465, 2.8880849, 0.6879733, 5.733069…\n$ x_2  <dbl> 6.732135, -6.886575, 4.037737, -2.108035, -10.401328, 17.655429, …\n$ x_3  <dbl> -7.9084791, -0.9541707, 1.9668472, -15.9822168, -3.7921834, 9.583…\n$ x_4  <dbl> -1.3333051, 10.5841591, 1.0329146, -5.8848456, 5.8751565, 17.9547…\n$ x_5  <dbl> 5.4258194, 18.1754493, 18.3107759, 4.2999158, -12.0440144, 18.238…\n$ x_6  <dbl> -4.3345960, 6.2063944, -9.6829079, -2.3638247, -11.4994761, 16.97…\n$ x_7  <dbl> 13.377810, 12.761476, 3.364706, -7.047563, -9.452121, -3.063861, …\n$ x_8  <dbl> 4.9863053, -10.0216563, 6.0416675, -9.6087385, -5.2677671, 18.807…\n$ x_9  <dbl> -11.2654331, 0.3969312, 4.5089003, 6.2910046, -5.5706542, 6.30376…\n$ x_10 <dbl> -5.3243680, -4.1584832, 16.4302778, -4.5227897, -0.5759885, 12.27…\n$ x_11 <dbl> -2.8717748, -15.9527089, -8.4020651, -21.4067819, -5.1716587, -1.…\n$ x_12 <dbl> -0.8255710, -13.9063481, -7.8553560, -15.6174041, -0.2032351, -0.…\n$ x_13 <dbl> -5.0226487, 0.2423470, -13.4792413, -17.7322866, -4.2641882, -13.…\n$ x_14 <dbl> 1.6697344, -9.7472781, 1.9116596, -14.2383036, 3.4108820, -7.1857…\n$ x_15 <dbl> -4.4078587, -17.3549677, -13.3750642, -6.3436646, -14.4783016, -1…\n$ x_16 <dbl> -12.5987264, 3.0650253, -10.1369743, -15.4306537, -16.8116483, -7…\n$ x_17 <dbl> 10.0679662, -16.2680745, -7.8039992, -30.4310419, -7.8560756, -0.…\n$ x_18 <dbl> 4.9402996, -15.4777909, 0.5120623, -24.0317505, -2.8721223, 0.461…\n$ x_19 <dbl> 3.90266477, -18.02732385, 0.09474399, -21.39430406, -11.94936843,…\n$ x_20 <dbl> 5.4561394, -3.4090854, -0.3550752, -11.9522175, -5.2609615, 2.381…\n$ y    <dbl> -92.38562, 64.57490, 67.80447, 32.97353, 177.86063, 50.00875, 68.…\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- MASS::mvrnorm(n = n_cases_test, mu, sigma) |> \n  magrittr::set_colnames(str_c(\"x_\", 1:n_x)) |>\n  as_tibble()\ndata_test_2 <- x |> \n  mutate(y = rowSums(t(t(x)*b_x)) + rnorm(n_cases_test, 0, y_error)) |>  \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 21\n$ x_1  <dbl> -19.3260095, -5.3623506, -16.9255899, 5.5493174, 14.9965119, -11.…\n$ x_2  <dbl> -3.7042124, 0.1290587, -3.0372145, 9.2876528, 12.3956629, -7.8307…\n$ x_3  <dbl> -7.79209805, 18.25340113, 0.06833241, -2.27459711, 8.76517873, 9.…\n$ x_4  <dbl> -3.3334124, 12.2829002, 3.9338672, -3.9389029, 5.2878331, -2.1167…\n$ x_5  <dbl> -34.9426303, 9.2574023, -3.6417173, -5.9916743, 10.4261807, 1.655…\n$ x_6  <dbl> -0.001829374, 20.600024213, 0.173148730, 6.104400301, 8.269919307…\n$ x_7  <dbl> -1.4374735, 7.5405424, 6.5958816, -5.4467627, 15.0439131, 1.45756…\n$ x_8  <dbl> -15.5100796, -4.5944480, 3.8149838, 11.9367657, 11.9002354, 5.760…\n$ x_9  <dbl> -14.2491503, -2.1829725, 8.8566042, 4.9237162, -1.0992521, -6.144…\n$ x_10 <dbl> -9.4656790, 15.3363435, 16.4882579, 6.1347801, 7.1040896, 19.3482…\n$ x_11 <dbl> -3.6565433, 4.8599310, 1.5807573, -2.0951752, 3.4182659, 8.555763…\n$ x_12 <dbl> 0.2197692, -1.4002588, 15.6415398, 2.4429828, 10.3908169, 15.7459…\n$ x_13 <dbl> -0.4834889, 14.4404582, -6.1966844, 2.2812604, -0.6109369, 14.888…\n$ x_14 <dbl> 2.2369810, 23.6286165, 14.3772218, 4.5313060, 7.4540744, 11.28109…\n$ x_15 <dbl> 12.2165650, 2.8590601, 9.6320309, -0.1679529, -1.0693068, 6.59127…\n$ x_16 <dbl> -1.1872969, -4.9773499, 2.9446327, 6.4909150, 3.8271113, 7.574543…\n$ x_17 <dbl> 23.2758817, 5.1783142, -5.7455295, 10.4846644, 11.1625519, -5.491…\n$ x_18 <dbl> 5.26704690, 14.01330775, 15.70541303, 25.65765475, 4.40028923, 19…\n$ x_19 <dbl> 8.8461426, 12.4465517, 7.2947844, 21.1447000, 2.1949018, 13.48330…\n$ x_20 <dbl> 2.89540058, 5.48058724, 6.98881342, -0.09682534, 15.03106832, 16.…\n$ y    <dbl> -42.86481, 46.87184, 50.14464, -119.30716, 38.10710, 90.32426, 44…\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nSet up a tibble to track model performance in train and test\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_ex2 <- tibble(model = character(), rmse_trn = numeric(), rmse_test = numeric()) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 0\nColumns: 3\n$ model     <chr> \n$ rmse_trn  <dbl> \n$ rmse_test <dbl> \n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit a standard (OLS) linear regression\n\nFit and evaluate the linear model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_2 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(y ~ ., data = data_trn_2)\n\nfit_lm_2 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 5\n   term        estimate std.error statistic p.value\n   <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n 1 (Intercept) -14.0        10.8    -1.30   0.198  \n 2 x_1           2.93        1.35    2.17   0.0330 \n 3 x_2          -0.800       1.33   -0.602  0.549  \n 4 x_3           1.24        1.62    0.762  0.448  \n 5 x_4           1.20        1.46    0.821  0.414  \n 6 x_5           2.31        1.44    1.60   0.114  \n 7 x_6           0.235       1.57    0.149  0.882  \n 8 x_7           1.63        1.46    1.12   0.268  \n 9 x_8          -0.548       1.33   -0.413  0.681  \n10 x_9          -1.19        1.38   -0.863  0.391  \n11 x_10         -0.187       1.67   -0.112  0.911  \n12 x_11         -2.19        1.36   -1.61   0.112  \n13 x_12          0.725       1.43    0.508  0.613  \n14 x_13          3.73        1.41    2.65   0.00983\n15 x_14         -0.183       1.40   -0.131  0.896  \n16 x_15         -0.163       1.32   -0.123  0.902  \n17 x_16         -4.54        1.42   -3.20   0.00199\n18 x_17          1.81        1.24    1.46   0.149  \n19 x_18         -1.19        1.31   -0.909  0.366  \n20 x_19          0.421       1.33    0.317  0.752  \n21 x_20         -0.0841      1.36   -0.0617 0.951  \n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Very overfit to train\n- Very poor performance in test \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex2 <- error_ex2 |> \n  bind_rows(tibble(model = \"linear model\",                       \n                   rmse_trn = rmse_vec(truth = data_trn_2$y, \n                                       estimate = predict(fit_lm_2,\n                                                          data_trn_2)$.pred),\n                   rmse_test = rmse_vec(truth = data_test_2$y, \n                                        estimate = predict(fit_lm_2,\n                                                           data_test_2)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     83.4      117.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit LASSO\n\nFor all glmnet algorithms, set up:\n\n- Recipe\n- Feature matrices\n- Bootstraps for model configuration selection (tuning)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_2 <- recipe(y ~ ., data = data_trn_2) |> \n  step_normalize(all_predictors())\n\nrec_prep_2 <- rec_2 |> \n  prep(data_trn_2)\n\nfeat_trn_2 <- rec_prep_2 |> \n  bake(NULL)\n\nfeat_test_2 <- rec_prep_2 |> \n  bake(data_test_2)\n\nset.seed(20140102)\nsplits_boot_2 <- data_trn_2 |> \n   bootstraps(times = 100, strata = \"y\") \n```\n:::\n\n\n\n\n-----\n\nTune $\\lambda$ for LASSO\n\n- We can use sample penalty grids from earlier example because sample size and number of features hasnt changed so likely still good\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_lasso_2 <- xfun::cache_rds(\n  expr = {\n    linear_reg(penalty = tune(), \n               mixture = 1) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_2, \n              resamples = splits_boot_2, \n              grid = grid_lasso, \n              metrics = metric_set(rmse))\n\n  },\n  rerun = rerun_setting,\n  dir = \"cache/006/\",\n  file = \"fits_lasso_2\")\n```\n:::\n\n\n\n\n-----\n\nPlot hyperparameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_lasso_2, hp1 = \"penalty\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best LASSO to full training set\n\n- Notice the many $\\beta$ = 0\n- It did set some of the \"good\" features to 0 as well\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lasso_2 <-\n  linear_reg(penalty = select_best(fits_lasso_2, metric = \"rmse\")$penalty, \n             mixture = 1) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_2)\n\nfit_lasso_2 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)     2.06    10.1\n 2 x_1            19.3     10.1\n 3 x_2             0       10.1\n 4 x_3             1.16    10.1\n 5 x_4             9.38    10.1\n 6 x_5            10.9     10.1\n 7 x_6             0       10.1\n 8 x_7             9.03    10.1\n 9 x_8             0       10.1\n10 x_9             0       10.1\n11 x_10            0       10.1\n12 x_11            0       10.1\n13 x_12            0       10.1\n14 x_13            5.48    10.1\n15 x_14            0       10.1\n16 x_15            0       10.1\n17 x_16          -15.1     10.1\n18 x_17            0       10.1\n19 x_18            0       10.1\n20 x_19            0       10.1\n21 x_20            0       10.1\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Somewhat overfit to train\n- Good in val\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex2 <- error_ex2 |> \n  bind_rows(tibble(model = \"LASSO model\",                       \n                   rmse_trn = rmse_vec(truth = feat_trn_2$y, \n                                       estimate = predict(fit_lasso_2,\n                                                          feat_trn_2)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_2$y, \n                                        estimate = predict(fit_lasso_2,\n                                                           feat_test_2)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     83.4      117.\n2 LASSO model      91.1      102.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit Ridge\n\nTune $\\lambda$ for Ridge\n\n- can use ridge penalty grid from example 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_ridge_2 <- xfun::cache_rds(\n  expr = {\n    linear_reg(penalty = tune(), \n               mixture = 0) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_2, \n              resamples = splits_boot_2, \n              grid = grid_ridge, \n              metrics = metric_set(rmse))\n\n  },\n  rerun = rerun_setting,\n  dir = \"cache/006/\",\n  file = \"fits_ridge_2\")\n```\n:::\n\n\n\n\n-----\n\nPlot hyperparameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_ridge_2, hp1 = \"penalty\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best Ridge to full training set\n\n- Notice no $\\beta$ = 0\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ridge_2 <-\n  linear_reg(penalty = select_best(fits_ridge_2, metric = \"rmse\")$penalty, \n             mixture = 0) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_2)\n\nfit_ridge_2 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)    2.06     176.\n 2 x_1            9.91     176.\n 3 x_2            1.05     176.\n 4 x_3            6.11     176.\n 5 x_4            6.83     176.\n 6 x_5            7.64     176.\n 7 x_6            2.32     176.\n 8 x_7            6.76     176.\n 9 x_8            2.31     176.\n10 x_9            0.716    176.\n11 x_10           3.31     176.\n12 x_11          -2.86     176.\n13 x_12          -0.572    176.\n14 x_13           5.93     176.\n15 x_14          -1.05     176.\n16 x_15          -1.75     176.\n17 x_16          -8.79     176.\n18 x_17           2.85     176.\n19 x_18          -2.80     176.\n20 x_19          -0.740    176.\n21 x_20           0.362    176.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Somewhat overfit to train\n- Still slightly better than LASSO in test (but maybe equivalent?)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex2 <- error_ex2 |> \n  bind_rows(tibble(model = \"Ridge model\",                       \n                   rmse_trn = rmse_vec(truth = feat_trn_2$y, \n                                       estimate = predict(fit_ridge_2,\n                                                          feat_trn_2)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_2$y, \n                                        estimate = predict(fit_ridge_2,\n                                                           feat_test_2)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     83.4      117.\n2 LASSO model      91.1      102.\n3 Ridge model      92.5      101.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n### Fit Complete glmnet\n\nTune $\\lambda$ and $\\alpha$ for glmnet\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_2 <- xfun::cache_rds(\n  expr = {\n    linear_reg(penalty = tune(), \n               mixture = tune()) |> \n    set_engine(\"glmnet\") |> \n    tune_grid(preprocessor = rec_2, \n              resamples = splits_boot_2, \n              grid = grid_glmnet, \n              metrics = metric_set(rmse))\n\n  },\n  rerun = rerun_setting,\n  dir = \"cache/006/\",\n  file = \"fits_glmnet_2\")\n```\n:::\n\n\n\n\n-----\n\nPlot hyperparameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet_2, hp1 = \"penalty\", hp2 = \"mixture\", metric = \"rmse\")\n```\n\n::: {.cell-output-display}\n![](l06_regularization_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n\n-----\n\nFit best glmnet in full train set\n\n- Still Ridge (but won't always be)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_best(fits_glmnet_2, metric = \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  penalty mixture .config                \n    <dbl>   <dbl> <chr>                  \n1    176.       0 Preprocessor1_Model0386\n```\n\n\n:::\n\n```{.r .cell-code}\nfit_glmnet_2 <-\n  linear_reg(penalty = select_best(fits_glmnet_2, metric = \"rmse\")$penalty, \n             mixture = select_best(fits_glmnet_2, metric = \"rmse\")$mixture) |>\n  set_engine(\"glmnet\") |> \n  fit(y ~ ., data = feat_trn_2)\n\nfit_glmnet_2 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)    2.06     176.\n 2 x_1            9.91     176.\n 3 x_2            1.05     176.\n 4 x_3            6.11     176.\n 5 x_4            6.83     176.\n 6 x_5            7.64     176.\n 7 x_6            2.32     176.\n 8 x_7            6.76     176.\n 9 x_8            2.31     176.\n10 x_9            0.716    176.\n11 x_10           3.31     176.\n12 x_11          -2.86     176.\n13 x_12          -0.572    176.\n14 x_13           5.93     176.\n15 x_14          -1.05     176.\n16 x_15          -1.75     176.\n17 x_16          -8.79     176.\n18 x_17           2.85     176.\n19 x_18          -2.80     176.\n20 x_19          -0.740    176.\n21 x_20           0.362    176.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\nIrreducible error was set by `y_error` (100)\n\n- Somewhat overfit to train\n- Still not bad in validate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(error_ex2 <- error_ex2 |> \n  bind_rows(tibble(model = \"glmnet model\",   \n                   rmse_trn = rmse_vec(truth = feat_trn_2$y, \n                                       estimate = predict(fit_glmnet_2,\n                                                          feat_trn_2)$.pred),\n                   rmse_test = rmse_vec(truth = feat_test_2$y, \n                                        estimate = predict(fit_glmnet_2,\n                                                           feat_test_2)$.pred))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  model        rmse_trn rmse_test\n  <chr>           <dbl>     <dbl>\n1 linear model     83.4      117.\n2 LASSO model      91.1      102.\n3 Ridge model      92.5      101.\n4 glmnet model     92.5      101.\n```\n\n\n:::\n:::\n\n\n\n\n-----\n\n## LASSO for Feature (e.g., Covariate) Selection?\n\nLets consider a typical explanatory setting in Psychology\n\n- A focal dichotomous IV (your experimental manipulation)\n- A number of covariates (some good, some bad)\n- A quantitative outcome (y)\n- Covariates are uncorrelated with IV b/c IV is manipulated\n\nLet's pretend the previous 20 `x`s were your covariates\n\n-----\n\nWhat are your options to test `iv` prior to this course?\n\n- You want to use covariates to increase power \n\n- BUT you don't know which covariates to use\n\n  - You might use all of them\n\n  - Or you might use none of them (a clear lost opportunity)\n\n  - Or you might hack it by using those increase your focal IV effect (very bad!)\n  \n-----\n\n\nNOW, We might use the feature selection characteristics for LASSO to select which covariates are included\n\nThere are two possibilities that occur to me\n\n-----\n\n1.  Use LASSO to build best DGP for a covariates only model\n\n- Could be more conservative (fewer covariates) by using within 1 SE of best performance but less flexible (i.e., will set more parameter estimates to 0)\n- Follow up with a linear model (using $lm$), regressing y on $iv$ and covariates from LASSO that are non-zero\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lasso_2 |> \n  tidy() |> \n  print(n = 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)     2.06    10.1\n 2 x_1            19.3     10.1\n 3 x_2             0       10.1\n 4 x_3             1.16    10.1\n 5 x_4             9.38    10.1\n 6 x_5            10.9     10.1\n 7 x_6             0       10.1\n 8 x_7             9.03    10.1\n 9 x_8             0       10.1\n10 x_9             0       10.1\n11 x_10            0       10.1\n12 x_11            0       10.1\n13 x_12            0       10.1\n14 x_13            5.48    10.1\n15 x_14            0       10.1\n16 x_15            0       10.1\n17 x_16          -15.1     10.1\n18 x_17            0       10.1\n19 x_18            0       10.1\n20 x_19            0       10.1\n21 x_20            0       10.1\n```\n\n\n:::\n:::\n\n\n\n\n- You clearly improved your best guess on covariates to include \n- You will regress y on `iv` and the 7 covariates with non-zero effects\n\n-----\n\n2. Use LASSO to build best DGP including `iv` and covariates but don't penalize `iv`\n\n- Look at `penalty.factor = rep(1, nvars)` argument in `glmnet()`\n- Can fit LASSO with unbiased? estimate of `iv`\n- Need to bootstrap for SE for `iv` (next unit)\n- Only appropriate if IV is manipulated\n\nShould really conduct simulation study of both of these options (vs. all and no covariates).  \n\n- I want to\n- Want to do the study with me?\n\n-----\n\n## Ridge, LASSO, and Elastic net models for other Y distributions\n\nThese penalties can be added to the cost functions of other generalized linear models to yield regularized/penalized versions of those models as well.  For example\n\nL1 penalized (LASSO) logistic regression (w/ labels coded 0,1):\n\n- $\\frac{1}{n}([\\:\\sum_{i = 1}^{n} -Y_ilog(\\hat{Y_i}) - (1-Y_i)log(1-\\hat{Y_i})\\:]\\:+\\:[\\:\\lambda\\sum_{j = 1}^{p} |\\beta_j|\\:]$\n\nFor L2 penalized (Ridge) logistic regression (w/ labels coded 0,1)\n\n- $\\frac{1}{n}([\\:\\sum_{i = 1}^{n} -Y_ilog(\\hat{Y_i}) - (1-Y_i)log(1-\\hat{Y_i})\\:]\\:+\\:[\\:\\lambda\\sum_{j = 1}^{p} \\beta_j^{2}\\:]$\n\n`glmnet` implements: \n\n- `family = c(\"gaussian\", \"binomial\", \"poisson\", \"multinomial\", \"cox\", \"mgaussian\")`\n- Full range of $\\alpha$ to mix two types of penalties",
    "supporting": [
      "l06_regularization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}