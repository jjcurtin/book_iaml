{
  "hash": "cc74aeac6cca707ea560b03bffd133c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n::: {.content-visible unless-format=\"revealjs\"}\n# Advanced Performance Metrics\n:::\n::: {.content-visible when-format=\"revealjs\"}\n# IAML Unit 8: Advanced Performance Metrics\n:::\n\n\n## Learning Objectives\n\n- Understand costs and benefits of accuracy \n- Use of a confusion matrix\n- Understand costs and benefits of other performance metrics\n- The ROC curve and area under the curve\n- Model selection using other performance metrics\n- How to address class imbalance\n  - Selection of performance metric\n  - Selection of classification threshold\n  - Sampling and resampling approaches\n\n--------------------------------------------------------------------------------\n\n## Introduction\n\n\n\n\n\nIn this unit, we will again use the Cleveland heart disease dataset.\n\nHowever, I have modified this to make the outcome unbalanced such that Yes represents approximately 10% of the observations\n\nNow that we will calculate performance metrics beyond accuracy, the order of the levels of our outcome variable(`disease`) matters.  We will make sure that the positive class (event of interest; in this case yes for `disease`) is the **first level**.\n\n--------------------------------------------------------------------------------\n\nFirst, lets open and skim the raw data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_all <- read_csv(here::here(path_data, \"cleveland_unbalanced.csv\"), \n                     col_names = FALSE, na = \"?\", \n                     col_types = cols()) |> \n  rename(age = X1,\n         sex = X2,\n         cp = X3,\n         rest_bp = X4,\n         chol = X5,\n         fbs = X6,\n         rest_ecg = X7,\n         exer_max_hr = X8,\n         exer_ang = X9,\n         exer_st_depress = X10,\n         exer_st_slope = X11,\n         ca = X12,\n         thal = X13,\n         disease = X14) \n\ndata_all |> skim_some()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |data_all |\n|Number of rows           |1281     |\n|Number of columns        |14       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |14       |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable   | n_missing| complete_rate|  p0|  p100|\n|:---------------|---------:|-------------:|---:|-----:|\n|age             |         0|          1.00|  29|  77.0|\n|sex             |         0|          1.00|   0|   1.0|\n|cp              |         0|          1.00|   1|   4.0|\n|rest_bp         |         0|          1.00|  94| 200.0|\n|chol            |         0|          1.00| 126| 564.0|\n|fbs             |         0|          1.00|   0|   1.0|\n|rest_ecg        |         0|          1.00|   0|   2.0|\n|exer_max_hr     |         0|          1.00|  71| 202.0|\n|exer_ang        |         0|          1.00|   0|   1.0|\n|exer_st_depress |         0|          1.00|   0|   6.2|\n|exer_st_slope   |         0|          1.00|   1|   3.0|\n|ca              |        22|          0.98|   0|   3.0|\n|thal            |         8|          0.99|   3|   7.0|\n|disease         |         0|          1.00|   0|   4.0|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nCode categorical variables as factors with meaningful text labels (and no spaces)\n\n- NOTE the use of `disease = fct_relevel (disease, \"yes\")` to set yes as positive class (first level) for disease\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_all <- data_all |> \n  mutate(disease = factor(disease, levels = 0:4, \n                          labels = c(\"no\", \"yes\", \"yes\", \"yes\", \"yes\")),\n         disease = fct_relevel (disease, \"yes\"),\n         sex = factor(sex,  levels = c(0, 1), labels = c(\"female\", \"male\")),\n         fbs = factor(fbs, levels = c(0, 1), labels = c(\"no\", \"yes\")),\n         exer_ang = factor(exer_ang, levels = c(0, 1), labels = c(\"no\", \"yes\")),\n         exer_st_slope = factor(exer_st_slope, levels = 1:3, \n                                labels = c(\"upslope\", \"flat\", \"downslope\")),\n         cp = factor(cp, levels = 1:4, \n                     labels = c(\"typ_ang\", \"atyp_ang\", \"non_anginal\", \"non_anginal\")),\n         rest_ecg = factor(rest_ecg, levels = 0:2, \n                           labels = c(\"normal\", \"wave_abn\", \"ventric_hypertrophy\")),\n         thal = factor(thal, levels = c(3, 6, 7), \n                       labels = c(\"normal\", \"fixeddefect\", \"reversabledefect\")))\n\ndata_all |> skim_some()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |data_all |\n|Number of rows           |1281     |\n|Number of columns        |14       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|factor                   |8        |\n|numeric                  |6        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                   |\n|:-------------|---------:|-------------:|:-------|--------:|:----------------------------|\n|sex           |         0|          1.00|FALSE   |        2|mal: 752, fem: 529           |\n|cp            |         0|          1.00|FALSE   |        3|non: 872, aty: 296, typ: 113 |\n|fbs           |         0|          1.00|FALSE   |        2|no: 1104, yes: 177           |\n|rest_ecg      |         0|          1.00|FALSE   |        3|nor: 721, ven: 550, wav: 10  |\n|exer_ang      |         0|          1.00|FALSE   |        2|no: 1044, yes: 237           |\n|exer_st_slope |         0|          1.00|FALSE   |        3|ups: 778, fla: 434, dow: 69  |\n|thal          |         8|          0.99|FALSE   |        3|nor: 940, rev: 285, fix: 48  |\n|disease       |         0|          1.00|FALSE   |        2|no: 1142, yes: 139           |\n\n\n**Variable type: numeric**\n\n|skim_variable   | n_missing| complete_rate|  p0|  p100|\n|:---------------|---------:|-------------:|---:|-----:|\n|age             |         0|          1.00|  29|  77.0|\n|rest_bp         |         0|          1.00|  94| 200.0|\n|chol            |         0|          1.00| 126| 564.0|\n|exer_max_hr     |         0|          1.00|  71| 202.0|\n|exer_st_depress |         0|          1.00|   0|   6.2|\n|ca              |        22|          0.98|   0|   3.0|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nDisease is now unbalanced\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_all |> tab(disease)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  disease     n  prop\n  <fct>   <int> <dbl>\n1 yes       139 0.109\n2 no       1142 0.891\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nFor this example, we will evaluate our final model using a held out test set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20140102)\nsplits_test <- data_all |> \n  initial_split(prop = 2/3, strata = \"disease\")\n\ndata_trn <- splits_test |> \n  analysis()\n\ndata_test <- splits_test |> \n  assessment()\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nWe will be fitting a penalized logistic regression again (using glmnet)\n\nWe will do only basic feature engineering for this algorithm and to handle missing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(disease ~ ., data = data_trn) |> \n  step_impute_median(all_numeric_predictors()) |> \n  step_impute_mode(all_nominal_predictors()) |>   \n  step_dummy(all_nominal_predictors()) |> \n  step_normalize(all_predictors())\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nWe tune/select best hyperparameter values via bootstrap resampling with the training data\n\n- get bootstrap splits\n- make grid of hyperparameter values\n\n::: {.cell}\n\n```{.r .cell-code}\nsplits_boot <- data_trn |> \n  bootstraps(times = 100, strata = \"disease\")  \n\ngrid_glmnet <- expand_grid(penalty = exp(seq(-8, 3, length.out = 200)),\n                           mixture = seq(0, 1, length.out = 6))\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(accuracy))\n  },\n  dir = \"cache/008/\",\n  file = \"fits_glmnet\",\n  rerun = rerun_setting)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nReview hyperparameter plot and best values for hyperparameters\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet, hp1 = \"penalty\", hp2 = \"mixture\", \n                     metric = \"accuracy\", log_hp1 = TRUE)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fits_glmnet, n = 1, metric = \"accuracy\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n   penalty mixture .metric  .estimator  mean     n std_err\n     <dbl>   <dbl> <chr>    <chr>      <dbl> <int>   <dbl>\n1 0.000335     0.8 accuracy binary     0.933   100 0.00104\n  .config                \n  <chr>                  \n1 Preprocessor1_Model0801\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's fit this best model configuration to all of our training data and evaluate it in test\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfit_glmnet <-   \n  logistic_reg(penalty = select_best(fits_glmnet, metric = \"accuracy\")$penalty, \n               mixture = select_best(fits_glmnet, metric = \"accuracy\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nAnd evaluate it by predicting into test\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_test <- rec_prep |> \n  bake(data_test)\n\n(model_accuracy <- accuracy_vec(feat_test$disease, predict(fit_glmnet, feat_test)$.pred_class))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9299065\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nAccuracy is an attractive measure because it is:\n\n- Intuitive and widely understood\n- Naturally extends to multi-class scenarios\n- These are not trivial advantages in research or application\n\nHowever, accuracy has at least three problems in some situations\n\n- If the outcome is unbalanced, it can be misleading\n  - High performance from simply predicting the majority (vs. minority) class for all observations\n  - Need to anchor evaluation of accuracy to baseline performance based on the majority case percentage\n\n- If the outcome is unbalanced, selecting among model configurations with accuracy can be biased toward configurations that predict the majority class because that will yield high accuracy by itself even without any signal from the predictors\n\n- Regardless of outcome distribution, it considers false positives (FP) and false negatives (FN) equivalent in their costs\n  - This is often not the case\n\n--------------------------------------------------------------------------------\n\nOutcome distributions :\n\n- May start to be considered unbalanced at ratios of 1:5 (20% of cases in the infrequent class)\n- In many real life applications (e.g., fraud detection), imbalance ratios ranging from 1:1000 up to 1:5000 are not atypical\n\nWhen working with unbalanced datasets:\n\n- The class or classes with many observations are called the major or **majority class(es)**\n- The class with few observations (and there is typically just one) is called the minor or **minority class**.\n\nIn our example, the majority class is negative (no) for heart disease and the minority class is positive (yes) for heart disease\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: In our example, our model's accuracy in test seemed high but was it really performing as well as this seems?\n:::\n\n::: {.fragment .uwred}\nAlthough this test accuracy seems high, this is somewhat misleading.  A model that simply labeled everyone as negative for heart disease would achieve almost as high accuracy in our test data\n:::\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(model_accuracy <- accuracy_vec(feat_test$disease, \n                                predict(fit_glmnet, feat_test)$.pred_class))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9299065\n```\n\n\n:::\n\n```{.r .cell-code}\nfeat_test |> tab(disease)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  disease     n  prop\n  <fct>   <int> <dbl>\n1 yes        47 0.110\n2 no        381 0.890\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: Perhaps more importantly, are the costs of false positives (screening someone as positive when they do not have heart disease) and false negatives (screening someone as negative when they do have heart disease) comparable for a preliminary screening method?\n:::\n\n::: {.fragment .uwred}\nProbably not.  A false positive might mean that we do more testing that is unnecessary and later find out they do not have heart disease.   This comes with some monetary cost and also likely some distress for the patient.   However, a false negative means we send the patient home thinking they are healthy and may suffer a heart attack or other bad outcome.  That seems worse if this is only a preliminary screen.\n:::\n\n--------------------------------------------------------------------------------\n\n## The Confusion Matrix and Related Performance Metrics\n\nAt a minimum, it seems important to consider these issues explicitly but accuracy is not sufficiently informative.\n\nThe first step to this more careful assessment is to construct a confusion matrix\n\n--------------------------------------------------------------------------------\n\n|               | **Ground Truth** |    |\n|:--------------|:--------- |:----------|\n| **Prediction**| Positive  | Negative  | \n| Positive      | TP        | FP        |\n| Negative      | FN        | TN        |\n\nDefinitions: \n\n- TP: True positive\n- TN: True negative\n- FP: False positive (Type 1 error/false alarm)\n- FN: False negative (Type 2 error/miss)\n\nPerfect classifier has all the observations on the diagonal from top left to bottom right\n\nThe two types of errors (on the other diagonal) may have different costs\n\nWe can now begin to consider these costs\n\n--------------------------------------------------------------------------------\n\nLets look at the confusion matrix associated with our model's performance in test\n\n- We will use `conf_mat()` to calculate the confusion matrix\n- There does NOT (yet?) seem to be a vector version (i.e., `conf_mat_vec()`)\n- Therefore, we have to build a tibble of `truth` and `estimate` to pass into `conf_mat()`\n- It is best to assign the result to an object (e.g., `cm`) because we will use it for a few different tasks\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncm <- tibble(truth = feat_test$disease,\n             estimate = predict(fit_glmnet, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's display the matrix\n\n- The columns are sorted based on the true value for the observation (i.e., ground truth)\n  - In this case, that is the patients' true disease status\n  - We can see it is unbalanced with most of the cases in the \"no\" column\n\n- The rows are sorted by our model's predictions\n\n- As we noted above, correct predictions fall on the top/left- bottom/right diagonal\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction yes  no\n       yes  30  13\n       no   17 368\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nTidy model's makes it easy to visualize this matrix in one of two types of plots\n\n- mosaic (the default)\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-16-1.png){width=672 height=3in}\n:::\n:::\n\n\n- heatmap\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-17-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nRegardless of the plot, you can now begin to see the issues with our model\n\n- It seems accurate for patients that do NOT have heart disease\n  - 368/381 correct\n- It is not very accurate for patients that DO have heart disease\n  - 30/47 correct\n\n- This differential performance was masked by our global accuracy measure because overall accuracy was weighted heavily toward accuracy for patients without heart disease given their much higher numbers\n\n--------------------------------------------------------------------------------\n\nWe can use this confusion matrix as the starting point for MANY other common metrics and methods for evaluating the performance of a classification model.  In many instances, the metrics come in pairs that are relevant for FP and FN errors\n\n- Sensitivity & Specificity\n- Positive and Negative Predictive Value (PPV, NPV)\n- Precision and Recall\n\n--------------------------------------------------------------------------------\n\nThere are also some single metric approaches (like accuracy) that may be preferred when the outcome is unbalanced\n\n- Balanced accuracy\n- F1 (and other F-scores)\n- Kappa\n\n--------------------------------------------------------------------------------\n\nThere are also graphical approaches are based on either sensitivity/specificity or precision/recall.  These are:\n\n  - The Receiver Operating Characteristic (ROC) curve\n  - The Precision/Recall Curve (not covered further in this unit)\n  - Each of these curves also yields a single metric that represents the area under the curve\n  \n--------------------------------------------------------------------------------\n\nThe best metric/method is a function both of your intended use and the class distributions\n\n- As noted, **accuracy** is widely understood but can be misleading when class distributions are highly unbalanced\n\n- **Sensitivity/Specificity** are common in literatures that consider diagnosis (clinical psychology/psychiatry, medicine)\n\n- **Positive/Negative predictive value** are key to consider with sensitivity/specificity when classes are unbalanced\n\n- **ROC curve and its auROC metric** provide nice summary visualization and metric when considering classification thresholds other than 50% (also common when classes are unbalanced or types of errors matter)\n\n--------------------------------------------------------------------------------\n\nHere are definitions of many of the most common metrics linked to the confusion matrix\n\n\n|               | **Ground Truth**  |   |\n|:--------------|:--------- |:----------|\n| **Prediction**| Positive  | Negative  | \n| Positive      | TP        | FP        |\n| Negative      | FN        | TN        |\n\n$Accuracy = \\frac{TN + TP}{TN + TP + FN + FP}$\n\n$Sensitivity\\:(Recall) = \\frac{TP}{TP + FN}$\n\n$Specificity = \\frac{TN}{TN + FP}$\n\n$Positive\\:Predictive\\:Value\\:(Precision) = \\frac{TP}{TP + FP}$\n\n$Negative\\:Predictive\\:Value = \\frac{TN}{TN + FN}$\n\n$Balanced\\:accuracy = \\frac{Sensitivity + Specificity}{2}$\n\n$F_\\beta$ score:\n\n- $F1 = 2 * \\frac{Precision * Recall}{Precision + Recall}$ (most common; harmonic mean of precision and recall)\n\n- $F_\\beta = (1 + \\beta^2) * \\frac{Precision * Recall}{(\\beta^2*Precision) + Recall}$\n\n- $F_\\beta$ was derived so that it measures the effectiveness of a classifier for someone who assigns $\\beta$ times as much importance to recall as precision\n\n\n--------------------------------------------------------------------------------\n\nIt is easy to get any of these performance metrics using `summary()` on the confusion matrix\n\nMany of the statistics generated are based on an understanding of which level is the positive level.  \n\n- Tidymodels (yardstick to be precise) will default to consider the first level the positive level.  \n- If this is not true, some statistics (e.g., sensitivity, specificity) will be incorrect (i.e., swapped). \n- You can override this default by setting the following parameter inside any function that is affected by the order of the classes\" `event_level = \"second\"`\n\n--------------------------------------------------------------------------------\n\nHere is summary in action!\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.930\n 2 kap                  binary         0.628\n 3 sens                 binary         0.638\n 4 spec                 binary         0.966\n 5 ppv                  binary         0.698\n 6 npv                  binary         0.956\n 7 mcc                  binary         0.628\n 8 j_index              binary         0.604\n 9 bal_accuracy         binary         0.802\n10 detection_prevalence binary         0.100\n11 precision            binary         0.698\n12 recall               binary         0.638\n13 f_meas               binary         0.667\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's consider some of what these metrics are telling us about our classifier by looking at the metrics and a confusion matrix plot\n\nLet's start with **sensitivity** and **specificity** and their arithmetic mean (**balanced accuracy**)\n\n- These are column specific accuracies\n- Focus is on truth (columns)\n- Focuses a priori on two types of patients that may walk into the clinic to use our classifier\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |> \n  filter(.metric == \"sens\" | .metric == \"spec\" | .metric == \"bal_accuracy\") |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  .metric      .estimate\n  <chr>            <dbl>\n1 sens             0.638\n2 spec             0.966\n3 bal_accuracy     0.802\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-20-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: Can you link the numbers in the confusion matrix on the previous slide to Sensitivity and Specificity metrics\n:::\n\n::: {.fragment .uwred}\nSensivity is \"accuracy\" for the positive cases (in this instance, those with disease = yes).  \nSensitivity = 30 / (17 + 30)\n\nSpecificity is \"accuracy\" for the negative cases (disease = no).  \nSpecificity = 368 / (368 + 13)\n:::\n\n--------------------------------------------------------------------------------\n\nNow let's consider **positive predictive value** and **negative predictive value** \n\n- These are row specific accuracies\n- Focus is on model predictions (rows)\n- Focuses on the utility of the information/screening result provided from our classifier\n- Not typically reported alone but instead in combo with sensitivity/specificity and prevalence (see next pages)\n- Mosaic plot is better visualization for sensitivity/specificity (though I also like the numbers).  Not that useful for PPV/NPV\n- Use heatmap?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-21-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-22-1.png){width=672 height=3in}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |>\n  filter(.metric == \"ppv\" | .metric == \"npv\") |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  .metric .estimate\n  <chr>       <dbl>\n1 ppv         0.698\n2 npv         0.956\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: Can you link the numbers in the confusion matrix on the previous slide to PPV and NPV metrics\n:::\n\n::: {.fragment .uwred}\nPPV is \"accuracy\" for the positive predictions (in this instance, when the model predicts yes. \nPPV = 30 / (30 + 13)\n\nNPV is \"accuracy\" for the negative predictions (disease = no).  \nNPV = 368 / (368 + 17)\n:::\n\n--------------------------------------------------------------------------------\n\n- PPV and NPV are influenced by both sensitivity and specificity BUT ALSO prevalence.\n\n- This becomes important in unbalanced settings where prevalence of classes is not equal\n  - Your classifier's PPV will be lower, even with good sensitivity and specificity if the prevalence of the positive class is low   \n  - Conversely, your classifier's NPV will be lower, even with good sensitivity and specificity, if the prevalence of the negative class is low.\n\n- Prevalence also can vary by testing setting\n\n--------------------------------------------------------------------------------\n\nTests for many genetic disorders have very good sensitivity and specificity but their PPV (and NPV) vary widely by setting/patients tested\n\n- Test for multiple endocrine neoplasia type 2 (MEN2) based on mutations in RET\n  - Sensitivity = 98%\n  - Specificity = 99.9%\n\nMENS2 has prevalence of 1/30,000 in general population.  If using the test in the general population with 3 million people:\n\n- 100 will have the disease\n- 2,999,900 will not have the disease\n- Column accuracies (sensitivity and specificity) are high\n- PPV will be very BAD;  98/(3000 + 98) = 3.2%\n- Though NPV will be very near perfect! 2996900 / (2996900 + 2)\n\n|               | **Ground Truth**|     |\n|:--------------|:--------- |:----------|\n| **Prediction**| Positive  | Negative  | \n| Positive      | 98        |    3000   |\n| Negative      |  2        | 2996900   | \n\n--------------------------------------------------------------------------------\n\nHowever, MENS2 prevalence is high (1/5) among patients who present in a clinic with medullary thyroid carcinoma.  If we only used the test among 3 million of these patients \n\n- 600,000 will have the disease\n- 2,400,000 will NOT have the disease (still unbalanced by but much less)\n- Column accuracies (sensitivity and specificity) remain the same (98% and 99.9%)\n  - These are properties of the test/classifier\n- PPV is now much better; 588,000 / (2400 + 588,000) = 99.6%\n  \n|               | **Ground Truth**|     |\n|:--------------|:--------- |:----------|\n| **Prediction**| Positive  | Negative  | \n| Positive      | 588000    |    2400   |\n| Negative      |  12000    | 2397600   | \n\n--------------------------------------------------------------------------------\n\nNow think about \"accuracy\" of any specific COVID test\n\n- It dismayed me to see talk of accuracy\n  - The cost of the two types of errors is different!\n- Occasionally, there was talk of sensitivity and specificity\n- There was rarely/never discussion of PPV and NPV, which is what matters most when you are given your test result\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: How would the PPV and NPV change when we moved from testing only people with symptoms who presented at the hospital to testing everyone (e.g., all college students)?\n:::\n\n::: {.fragment .uwred}\nRelatively speaking, when testing someone with obvious COVID symptoms PPV would be high but NPV could be low.  Conversely, for our students PPV is likely low but NPV is likely high\n:::\n\n--------------------------------------------------------------------------------\n\nIn some instances, it may be more useful to focus on **precision** and **recall** rather than sensitivity and specificity.  The **F1 measure** is the harmonic mean of precision and recall\n\n- This is a row and column accuracy \n- Recall (sensitivity) focuses on how many true positive cases will we correctly identify\n- Precision (PPV) focuses on how accurate the prediction of \"positive\" will be (prevalence dependent)\n- This keeps the focus on positive cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-24-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-25-1.png){width=672 height=3in}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |> \n  filter(.metric == \"precision\" | .metric == \"recall\" | .metric == \"f_meas\") |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  .metric   .estimate\n  <chr>         <dbl>\n1 precision     0.698\n2 recall        0.638\n3 f_meas        0.667\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: Can you link the numbers in the confusion matrix on the previous slide to Recall (Sensitivity) and Precision (PPV) metrics\n:::\n\n::: {.fragment .uwred}\nRecall/sensitivity is \"accuracy\" for the positive cases (in this instance, patients with heart disease).\n30 / (30 + 17)\n\nPrecision/PPV is \"accuracy\" for the positive predictions (when model predicts yes).  \n30 / (30 + 13)\n:::\n\n--------------------------------------------------------------------------------\n\n$F1$ is the harmonic mean of Recall and Precision\n\n- Harmonic means are used with rates (see [more detail](https://en.wikipedia.org/wiki/Mean) about the Pythagorean means, if interested)\n- $F1$ is an unweighted harmonic mean\n  - $F1 = 2 * \\frac{Precision * Recall}{Precision + Recall}$ \n  - or using the more general formula for harmonic means: $F1 = \\frac{2}{\\frac{1}{Precision} + \\frac{1}{Recall}}$ \n- $F_\\beta$ is a weighted version where $\\beta$ is the relative weighting of recall to precision\n  - Two commonly used values for $\\beta$ are 2, which weighs recall twice as much than precision, and 0.5, which weighs precision twice as much as recall \n  - $F_\\beta = (1 + \\beta^2) * \\frac{Precision * Recall}{(\\beta^2*Precision) + Recall}$\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |> \n  filter(.metric == \"precision\" | .metric == \"recall\" | .metric == \"f_meas\") |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  .metric   .estimate\n  <chr>         <dbl>\n1 precision     0.698\n2 recall        0.638\n3 f_meas        0.667\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n**Cohen's Kappa** is a bit more complicated to calculate and understand\n\n- There is a great [explanation of kappa](https://stats.stackexchange.com/questions/82162/cohens-kappa-in-plain-english) on stack overflow\n\n- Wikipedia also has a very detailed [definition and explanation](https://en.wikipedia.org/wiki/Cohen's_kappa) as well (though not in the context of machine learning)\n\n- Compares observed accuracy to expected accuracy (random chance)\n\n$Kappa = \\frac{observed\\:accuracy - expected\\:accuracy}{1 - expected\\:accuracy}$\n\n- When outcome is unbalanced, some agreement/accuracy (relationship between model predictions and reference/ground truth) is expected\n\n- Kappa adjusts for this\n\nKappa is essentially the proportional increase in accuracy above the accuracy expected by the base rates of the reference and classifier\n\n--------------------------------------------------------------------------------\n\nTo calculate the expected accuracy, we need to consider the probabilities of reference and classifier prediction both being positive (and both being negative) by chance given the base rates of these classes for the reference and classifier.\n\n\n|               | **Ground Truth**  |   |\n|:--------------|:--------- |:----------|\n| **Prediction**| Positive  | Negative  | \n| Positive      | TP        | FP        |\n| Negative      | FN        | TN        |\n\n\n$P_{positive} = \\frac{FN + TP}{TN + FN + FP + TP} * \\frac{FP + TP}{TN + FN + FP + TP}$\n\n$P_{negative} = \\frac{TN + FP}{TN + FN + FP + TP} * \\frac{TN + FN}{TN + FN + FP + TP}$\n\n$P_{expected} = P_{positive} + P_{negative}$\n\n--------------------------------------------------------------------------------\n\nIn our example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction yes  no\n       yes  30  13\n       no   17 368\n```\n\n\n:::\n:::\n\n\n$P_{positive} = \\frac{17 + 30}{428} * \\frac{13 + 30}{428} = 0.01103262$\n\n$P_{negative} = \\frac{368 + 13}{428} * \\frac{368 + 17}{428} = 0.8007522$\n\n$P_{expected} = 0.01103262 + 0.8007522 = 0.8117848$\n\n$Actual Accuracy = 0.9299065$\n\n$Kappa = \\frac{observed\\:accuracy - expected\\:accuracy}{1 - expected\\:accuracy}$\n\n$Kappa = \\frac{0.9299065 - 0.8117848}{1 - 0.8117848} = 0.627588$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cm) |> \n  filter(.metric == \"kap\") |> \n  pull(.estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6275886\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nKappa Rules of Thumb w/ a big grain of salt.......\n\n- Kappa < 0: No agreement\n- Kappa between 0.00 and 0.20: Slight agreement\n- Kappa between 0.21 and 0.40: Fair agreement\n- Kappa between 0.41 and 0.60: Moderate agreement\n- Kappa between 0.61 and 0.80: Substantial agreement\n- Kappa between 0.81 and 1.00: Almost perfect agreement.\n\nSee @Landis1977 ([PDF](pdfs/landis_1977_kappa.pdf))for more details \n\n--------------------------------------------------------------------------------\n\n## The Receiver Operating Characteristic Curve\n\nLet's return now to consider sensitivity and specificity again\n\nRemember that our classifier is estimating the probability of an observation being in the positive class.\n\nWe dichotomize this probability when we formally make a class prediction\n\n- If the probability > 50%, we classify the observation as positive\n- If the probability <= 50%, we classify the observation as negative\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: How can we improve sensitivity?\n:::\n\n::: {.fragment .uwred}\nWe can use a more liberal/lower classification threshold for saying someone has heart disease.  \n\nFor example, rather than requiring a 50% probability to classify as yes for heart disease, we could lower to 20% for the classification threshold\n:::\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: What will the consequences of this change be?\n:::\n\n::: {.fragment .uwred}\nFirst, the Bayes classifier threshold of 50% produces the highest overall accuracy so accuracy will generally (though not always) drop when you shift from 50%.  \n\nIf we think about this change as it applies to the columns of our confusion matrix, we will now catch more of the yes (fewer false negatives/misses), so sensitivity \nwill go up.  This was the goal of the lower threshold.  However, we will also end up with more false positives so specificity will drop.  If you consider the rows of \nthe confusion matrix, we will have more false positives so the PPV will drop.  \n\nHowever, we will have fewer false negatives so the NPV will increase.  Whether these trade-offs are worth it are a function of the cost of different types of errors \nand how much you gain and lose with regard to each type of performance metric (ROC can inform this; more in a moment)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm, type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-30-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nPreviously, we simply used `predict(fit_glmnet, feat_test)$.pred_class`.  \n\n`$.pred_class` dichotomized at 50% by default\n\n- This is the classification threshold to use with predicted probabilities that will produce the best overall accuracy (e.g., Bayes classifier)\n- However, we can use a different threshold to increase sensitivity or specificity\n- This comes at a cost to the other characteristic (its a trade-off)\n  - Lower threshold increases sensitivity but decreases specificity\n  - Higher threshold increases specificity but decreases sensitivity\n  \n--------------------------------------------------------------------------------\n\nIt is relatively easy to make a new confusion matrix and get new performance metrics with a different classification threshold\n\n- Make a tibble with truth and predicted probabilities\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- tibble(truth = feat_test$disease,\n                prob = predict(fit_glmnet, feat_test, type = \"prob\")$.pred_yes)\n\npreds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 428 × 2\n   truth    prob\n   <fct>   <dbl>\n 1 no    0.0160 \n 2 no    0.117  \n 3 no    0.0200 \n 4 no    0.00231\n 5 no    0.00984\n 6 no    0.00143\n 7 no    0.00507\n 8 no    0.0421 \n 9 no    0.00773\n10 no    0.103  \n# ℹ 418 more rows\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n- Use this to get class estimates at any threshold we want\n- Here we threshold at 20%\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- preds |> \n  mutate(estimate_20 = if_else(prob <= .20, \"no\", \"yes\"),\n         estimate_20 = factor(estimate_20, levels = c(\"yes\", \"no\"))) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 428 × 3\n   truth    prob estimate_20\n   <fct>   <dbl> <fct>      \n 1 no    0.0160  no         \n 2 no    0.117   no         \n 3 no    0.0200  no         \n 4 no    0.00231 no         \n 5 no    0.00984 no         \n 6 no    0.00143 no         \n 7 no    0.00507 no         \n 8 no    0.0421  no         \n 9 no    0.00773 no         \n10 no    0.103   no         \n# ℹ 418 more rows\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nWe can now make a confusion matrix for this new set of truth and estimates using the 20% threshold\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_20 <- preds |> \n  conf_mat(truth = truth, estimate = estimate_20)\n\ncm_20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction yes  no\n       yes  35  37\n       no   12 344\n```\n\n\n:::\n:::\n\n\nLet's compare to 50% (original)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction yes  no\n       yes  30  13\n       no   17 368\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nAnd let's compare these two thresholds on a subset of our numeric metrics\n\n- 20% threshold\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_20 |> \n  summary() |> \n  filter(.metric %in% c(\"accuracy\", \"sens\", \"spec\", \"ppv\", \"npv\")) |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  .metric  .estimate\n  <chr>        <dbl>\n1 accuracy     0.886\n2 sens         0.745\n3 spec         0.903\n4 ppv          0.486\n5 npv          0.966\n```\n\n\n:::\n:::\n\n\n- 50% threshold\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |> \n  filter(.metric %in% c(\"accuracy\", \"sens\", \"spec\", \"ppv\", \"npv\")) |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  .metric  .estimate\n  <chr>        <dbl>\n1 accuracy     0.930\n2 sens         0.638\n3 spec         0.966\n4 ppv          0.698\n5 npv          0.956\n```\n\n\n:::\n:::\n\n\n\n[Do the changes on each of these metrics make sense to you? If not, please review these previous slides again!]{.uwred}\n\n--------------------------------------------------------------------------------\n\nYou can begin to visualize the classifier performance by threshold simply by plotting histograms of the predicted positive class probabilities, separately for the true positive and negative classes\n\n- Let's look at our classifier\n- Ideally, the probabilities are mostly low for the true negative class (\"no\") and mostly high for the true positive class (\"yes\")\n- You can imagine how any specific probability cut point would affect specificity (apply cut to the  left panel) or sensitivity (apply cut to the right panel)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = preds, aes(x = prob)) + \n   geom_histogram(bins = 15) +\n   facet_wrap(vars(truth), nrow = 2) +\n   xlab(\"Pr(Disease)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n::: {.callout-important}\n# Question: What do you think about its performance? What insights does this plot generate?\n:::\n\n::: {.fragment .uwred}\n1. You can see that we can likely drop the threshold to somewhere about 25% without decreasing the specificity too much.  This will allow you to detect more positive cases.  \n\n2.  Our model seems to be able to predict negative cases well.  They mostly have low probabilities.   However, you can see its poor performance with positive cases.  They are spread pretty evenly across the full range of probabilities.  We likely do not have enough positive cases in our training data\n:::\n\n--------------------------------------------------------------------------------\n\nThe **Receiver Operating Characteristics (ROC)** curve for a classifier provides a more formal method to visualize the trade-offs between sensitivity and specificity across all possible thresholds for classification.\n\nLets look at this in our example\n\n- We need columns for truth and probabilities of the positive class for each observation\n- We need to specify the positive class\n- Returns tibble with data to plot an ROC curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_plot <- \n  tibble(truth = feat_test$disease,\n         prob = predict(fit_glmnet, feat_test, type = \"prob\")$.pred_yes) |> \n  roc_curve(prob, truth = truth)\n\nroc_plot\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 × 3\n    .threshold specificity sensitivity\n         <dbl>       <dbl>       <dbl>\n 1 -Inf            0                 1\n 2    0.000591     0                 1\n 3    0.000719     0.00787           1\n 4    0.000897     0.0131            1\n 5    0.00143      0.0210            1\n 6    0.00194      0.0262            1\n 7    0.00202      0.0315            1\n 8    0.00205      0.0341            1\n 9    0.00218      0.0394            1\n10    0.00229      0.0446            1\n# ℹ 192 more rows\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nWe can `autoplot()` this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(roc_plot)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-39-1.png){width=672 height=3in}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nOr we can customize a plot passing the data into` ggplot()`\n\n- Not doing anything fancy here\n- Consider this a shell for you to build on if you want more than `autoplot()` provides\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_plot |>\n  ggplot(aes(x = 1 - specificity, y = sensitivity)) +\n  geom_path() +\n  geom_abline(lty = 3) +\n  coord_equal() +\n  labs(x = \"1 - Specificity (FPR)\",\n       y = \"Sensitivity (TPR)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nWhen evaluating an ROC curve:\n\n- A random classifier would have a diagonal curve from bottom-left to top-right (the dotted line)\n\n- A perfect classifier would reach up to top-left corner\n  - Sensitivity = 1 (true positive rate)\n  - 1 - Specificity = 0 (false positive rate)\n\n--------------------------------------------------------------------------------\n\nThe ROC Curve is not only a useful method to visualize classier performance across\nthresholds\n\nThe area under the ROC curve (auROC) is an attractive performance metric\n\n- Ranges from 1.0 (perfect) down to approximately 0.5 (random classifier)\n    - If the auROC was consistently less than 0.5, then the predictions could simply be inverted\n    - Values between .70 and .80 are considered fair\n    - Values between .80 and .90 are considered good\n    - Values above .90 are considered excellent\n    - These are very rough, and to my eye, the exact cuts and labels are somewhat arbitrary\n\n--------------------------------------------------------------------------------\n\n- auROC is the probability that the classifier will rank/predict a randomly selected true positive observation higher than a randomly selected true negative observation\n\n- Alternatively, it can be thought of as the average sensitivity across all decision thresholds\n\n- auROC summarizes performance (sensitivity vs. specificity trade-off) across all possible thresholds\n\n- auROC is not affected by class imbalances in contrast to many other metrics\n\n--------------------------------------------------------------------------------\n\nIt is easy to get the auROC for the ROC in tidymodels using `roc_auc()`\n\nAs with calculating the ROC curve, we need \n\n- truth \n- predicted probabilities for the positive class\n- to specify the `event_level` (default is first)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(truth = feat_test$disease,\n       prob = predict(fit_glmnet, feat_test, type = \"prob\")$.pred_yes) |> \n  roc_auc(prob, truth = truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.896\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n## Using Alternative Performance Metrics for Model Selection\n\nYou can select the best model configuration using resampling with performance metrics other than accuracy\n\n- Aggregate measures are typically your best choice (except potentially with high imbalance - more on this later)\n\n  - For classification: \n    - Accuracy\n    - Balanced accuracy\n    - $F1$\n    - Area under ROC Curve (auROC)\n    - Kappa\n    \n  - For regression\n    - RMSE\n    - $R^2$\n    - MAE (mean absolute error)\n\n--------------------------------------------------------------------------------\n\n- You typically need to use a single metric for selection among model configurations\n  - You should generally use the performance metric that is the best aligned with your problem:\n\n- In classification\n  - Do you care about types of errors or just overall error rate\n  - Is the outcome relatively balanced or unbalanced\n  - What metric will be clearest to your audience\n\n- In regression\n  - Do you want to weight big and small errors the same\n  - What metric will be clearest to your audience (though all of these are pretty clear.  There are more complicated regression metrics)\n\n- Although you will use one metric to select the best configuration, you can evaluate/characterize the performance of your final model with as many metrics as you like\n\n--------------------------------------------------------------------------------\n\nYou should recognize the differences between the cost function for the algorithm and the performance metric:\n\n- Cost function is fundamental to the definition of the algorithm\n- Cost function is minimized to determine parameter estimates in parametric models\n- Performance metric is independent of algorithm\n- Performance metric is used to select and evaluate model configurations\n\n- Sometimes they can be the same metric (e.g., RMSE)  \n- BUT, this is not required\n\n--------------------------------------------------------------------------------\n\nWith `tidymodels`, it is easy to select hyperparameters or select among model configurations more generally using one of many different performance metrics\n\n- We will still use either `tune_grid()` or `fit_resamples()`\n- We will simply specify a different performance metric inside of `metric_set()`\n- If we only measure one performance metric, we can use defaults with `show_best()`\n\n--------------------------------------------------------------------------------\n\nHere is an example of measuring `roc_auc()` but you can use any performance function from the yardstick package\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_auc <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(roc_auc))\n\n  },\n  rerun = rerun_setting,\n  dir = \"cache/008/\",\n  file = \"fits_glmnet_auc\")\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nAnd now use `show_best()`, with best defined by auROC\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fits_glmnet_auc, n = 5, metric = \"roc_auc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  penalty mixture .metric .estimator  mean     n std_err .config                \n    <dbl>   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                  \n1  0.0996       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0104\n2  0.0798       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0100\n3  0.0844       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0101\n4  0.0892       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0102\n5  0.0756       0 roc_auc binary     0.905   100 0.00243 Preprocessor1_Model0099\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nYou can also measure multiple metrics during resampling but you will need to select the best configuration using only one\n\n- see `metric_set()` for the measurement of multiple metrics,\n- see `show_best()` for the use of `metric` to indicate which metric to use for selection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_many <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(roc_auc, accuracy, sens, spec, bal_accuracy))\n  },\n  rerun = rerun_setting,\n  dir = \"cache/008/\",\n  file = \"fits_glmnet_many\")\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nBut now we need to indicate how to define **best**\n\nWe will define it based on balanced accuracy\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fits_glmnet_many, metric = \"bal_accuracy\", n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n   penalty mixture .metric      .estimator  mean     n std_err\n     <dbl>   <dbl> <chr>        <chr>      <dbl> <int>   <dbl>\n1 0.000335     0.8 bal_accuracy binary     0.754   100 0.00381\n2 0.000355     0.8 bal_accuracy binary     0.754   100 0.00381\n3 0.000335     1   bal_accuracy binary     0.754   100 0.00379\n4 0.000355     1   bal_accuracy binary     0.754   100 0.00380\n5 0.000375     0.8 bal_accuracy binary     0.754   100 0.00380\n  .config                \n  <chr>                  \n1 Preprocessor1_Model0801\n2 Preprocessor1_Model0802\n3 Preprocessor1_Model1001\n4 Preprocessor1_Model1002\n5 Preprocessor1_Model0803\n```\n\n\n:::\n:::\n\n\nAnd here based on auROC (same as before)\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(fits_glmnet_many, metric = \"roc_auc\", n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  penalty mixture .metric .estimator  mean     n std_err .config                \n    <dbl>   <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                  \n1  0.0996       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0104\n2  0.0798       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0100\n3  0.0844       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0101\n4  0.0892       0 roc_auc binary     0.905   100 0.00244 Preprocessor1_Model0102\n5  0.0756       0 roc_auc binary     0.905   100 0.00243 Preprocessor1_Model0099\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nOf course, you can easily calculate any performance metric from `yardstick` [package](https://yardstick.tidymodels.org/reference/index.html) in test to evaluate your final model\n\n- Using `conf_mat()` and `summary()` as above (but not for auROC)\n- Using `*_vec()` functions; for example:\n  - `accuracy_vec()`\n  - `roc_auc_vec()`\n  - `sens_vec()`; `spec_vec()`\n- Piping a tibble that contain truth, and estimate or probability into appropriate function\n  - `accuracy()`\n  - `roc_auc()`\n  - `sens()`; `spec()`\n\n--------------------------------------------------------------------------------\n\nFit best model using auROC\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_auc <-   \n  logistic_reg(penalty = select_best(fits_glmnet_many, metric = \"roc_auc\")$penalty, \n               mixture = select_best(fits_glmnet_many, metric = \"roc_auc\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn)\n```\n:::\n\n\nand get all metrics\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_auc <- \n  tibble(truth = feat_test$disease,\n         estimate = predict(fit_glmnet_auc, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n\ncm_auc |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary        0.930 \n 2 kap                  binary        0.527 \n 3 sens                 binary        0.404 \n 4 spec                 binary        0.995 \n 5 ppv                  binary        0.905 \n 6 npv                  binary        0.931 \n 7 mcc                  binary        0.578 \n 8 j_index              binary        0.399 \n 9 bal_accuracy         binary        0.700 \n10 detection_prevalence binary        0.0491\n11 precision            binary        0.905 \n12 recall               binary        0.404 \n13 f_meas               binary        0.559 \n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nFit best model using balanced accuracy\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_bal <-   \n  logistic_reg(penalty = select_best(fits_glmnet_many, metric = \"roc_auc\")$penalty, \n               mixture = select_best(fits_glmnet_many, metric = \"roc_auc\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn)\n```\n:::\n\n\nand still get all metrics (different because best model configuration is different)\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_bal <- \n  tibble(truth = feat_test$disease,\n         estimate = predict(fit_glmnet_bal, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n\ncm_bal |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary        0.930 \n 2 kap                  binary        0.527 \n 3 sens                 binary        0.404 \n 4 spec                 binary        0.995 \n 5 ppv                  binary        0.905 \n 6 npv                  binary        0.931 \n 7 mcc                  binary        0.578 \n 8 j_index              binary        0.399 \n 9 bal_accuracy         binary        0.700 \n10 detection_prevalence binary        0.0491\n11 precision            binary        0.905 \n12 recall               binary        0.404 \n13 f_meas               binary        0.559 \n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n## Advanced Methods for Class Imbalances\n\nWhen there is a high degree of class imbalance:\n\n- It is often difficult to build models that predict the minority class well\n- This will yield low sensitivity if the positive class is the minority class (as in our example)\n- This will yield low specificity if the negative class is the minority class\n- Each of these issues may be a problem depending on the costs of FP and FN\n\n--------------------------------------------------------------------------------\n\nLet's see this at play again in our model\n\n- Using the 50% threshold we have low sensitivity but good specificity\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(cm)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-51-1.png){width=672 height=3in}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncm |> \n  summary() |> \n  filter(.metric == \"sens\" | .metric == \"spec\") |> \n  select(-.estimator)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  .metric .estimate\n  <chr>       <dbl>\n1 sens        0.638\n2 spec        0.966\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n- We do much better with probabilities for negative (majority) vs. positive (minority) class\n- We can see that we will not affect specificity much by lowering the threshold for positive classification to 20-25%\n- BUT, we really need to do do better with the distribution of probabilities for observations that are positive (yes)\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = preds, aes(x = prob)) + \n   geom_histogram(bins = 15) +\n   facet_wrap(vars(truth), nrow = 2) +\n   xlab(\"Pr(Disease)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nWhat can we do when we have imbalanced outcomes?\n\nWe will consider:\n\n- Changes to the classification/decision threshold that trade-off sensitivity vs. specificity for a fitted model (already discussed)\n- Changes to performance metric for selecting the best model configuration  (already demonstrated)\n- Sampling/Resampling methods that will affect the balance of the outcome in the training data to fit models that are better with the minority class (new)\n\n--------------------------------------------------------------------------------\n\n### Classification (Decision) Threshold\n\nWe have already seen an example of how the classification threshold (the probability at which we split between predicting a case as positive vs. negative) affects sensitivity vs. specificity\n\nDecreasing the threshold (probability) for classifying a case as positive will:\n\n- Increase sensitivity and decrease specificity\n- This will decrease FN but increase FP\n- This may be useful if the positive class is the minority class\n- The ROC curve is a useful display to provide this information about your classifier\n  - Curve can be colored to show the threshold\n- The separate histograms by positive vs. negative can also be useful as well\n- If you want to use your data to select the best threshold, you will need yet another set of data to make this selection\n  - Can't make the selection in training b/c those probabilities are overfit\n  - Can't make the selection of threshold in test and then also use the same test data to evaluate that model!\n\n--------------------------------------------------------------------------------\n\n### Performance Metric Considerations\n\nWhen you are choosing a performance metric for selecting your best model configuration, you should choose a performance metric that it best aligned with the nature of the performance you seek\n\n- If you want just good overall accuracy, accuracy may be a good metric\n- If the outcome is unbalanced, and you care about the types of errors, you might want\n  - Balanced accuracy (average of sensitive and specificity)\n  - Only sensitivity or specificity by itself (recommended by Kuhn)\n  - auROC\n  - An F measure (harmonic mean of sensitivity and PPV)\n  - May need to think carefully about what is most important to you\n\nEarlier, we saw that we got better sensitivity when we used balanced accuracy rather than accuracy to tune our hyperparameters\n\n--------------------------------------------------------------------------------\n\n### Sampling and Resampling to Address Class Imbalance\n\nWe can address issues of class imbalance either a priori or post-hoc with respect to data collection\n\n-  A priori method would be to over-sample to get more of the minority class into your training set\n  - Use targeted recruiting\n  - Can be very costly or impossible in many instances\n  - If possible,  this can be much better than the resampling approach below\n  \n- Post hoc, we can employ a variety of resampling procedures that are designed to make the training data more balanced\n  - We can up-sample the minority class\n  - We can down-sample the majority class\n  - We can synthesize new minority class observations e.g, SMOTE\n  \n- For both a priori sampling or post-hoc resampling strategies, it is important that your test set is not manipulated.  It should represent the expected distribution for the outcome, unaltered\n\n--------------------------------------------------------------------------------\n\n### Up-sampling\n\n- We resample minority class observations with replacement within our training set to increase the number of total observations of the minority class in the training set.\n- This simply duplicates existing minority class observations\n- Our test (or validation) set(s) should NOT be resampled.  This is handled well by `step_upsample()`\n\n--------------------------------------------------------------------------------\n\nLet's apply this in our example\n\n- Up-sampling is part of feature engineering recipe\n- Need to specify the outcome (`disease`)\n- Can set `over_ratio` to values other than 1 if desired\n- Makes sense to do this after missing data imputation and dummy coding\n- Makes sense to do this before normalizing features \n- These steps are in the `themis` package rather than `recipes` (can use namespace or load full library)\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_up <- recipe(disease ~ ., data = data_trn) |> \n  step_impute_median(all_numeric_predictors()) |> \n  step_impute_mode(all_nominal_predictors()) |>   \n  step_dummy(all_nominal_predictors()) |> \n  themis::step_upsample(disease, over_ratio = 1) |> \n  step_normalize(all_numeric_predictors())\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nNeed to re-tune model b/c the sample size has changed\n\nNeed to refit the final model to all of train\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_up <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec_up, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(bal_accuracy))\n  },\n  rerun = rerun_setting,\n  dir = \"cache/008/\",\n  file = \"fit_glmnet_up\")\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nReview hyperparameter plot\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet_up, hp1 = \"penalty\", hp2 = \"mixture\", metric = \"bal_accuracy\", log_hp1 = TRUE)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's fit this best model configuration to all of our training data and evaluate it in test\n\n- Note the use of `NULL` for `new_data` \n- `step_upsample()` is only applied to training/held-in but not held-out (truly new) data\n- `bake()` knows to use the training data provided during `prep()` if we specify `NULL`\n- Could have done this all along for baking training.  Its sometimes faster but previously same result.  Now its necessary!\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_up_prep <- rec_up |> \n  prep(data_trn)\n\nfeat_trn_up <- rec_up_prep |> \n  bake(new_data = NULL)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nNotice that `disease` is now balanced in the training data!\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn_up |> \n  skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |            |\n|:------------------------|:-----------|\n|Name                     |feat_trn_up |\n|Number of rows           |1522        |\n|Number of columns        |18          |\n|_______________________  |            |\n|Column type frequency:   |            |\n|factor                   |1           |\n|numeric                  |17          |\n|________________________ |            |\n|Group variables          |None        |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate| n_unique|top_counts        |\n|:-------------|---------:|-------------:|--------:|:-----------------|\n|disease       |         0|             1|        2|yes: 761, no: 761 |\n\n\n**Variable type: numeric**\n\n|skim_variable                | n_missing| complete_rate| mean| sd|    p0|   p25|   p50|   p75| p100|  skew| kurtosis|\n|:----------------------------|---------:|-------------:|----:|--:|-----:|-----:|-----:|-----:|----:|-----:|--------:|\n|age                          |         0|             1|    0|  1| -2.82| -0.70|  0.08|  0.75| 2.42| -0.31|    -0.53|\n|rest_bp                      |         0|             1|    0|  1| -2.19| -0.73| -0.17|  0.40| 3.32|  0.55|     0.40|\n|chol                         |         0|             1|    0|  1| -2.36| -0.72| -0.08|  0.64| 6.11|  1.03|     3.51|\n|exer_max_hr                  |         0|             1|    0|  1| -2.63| -0.74|  0.11|  0.71| 2.25| -0.49|    -0.23|\n|exer_st_depress              |         0|             1|    0|  1| -0.94| -0.94| -0.23|  0.49| 4.05|  1.07|     0.84|\n|ca                           |         0|             1|    0|  1| -0.74| -0.74| -0.74|  0.35| 2.53|  1.16|     0.25|\n|sex_male                     |         0|             1|    0|  1| -1.49| -1.49|  0.67|  0.67| 0.67| -0.82|    -1.33|\n|cp_atyp_ang                  |         0|             1|    0|  1| -0.45| -0.45| -0.45| -0.45| 2.24|  1.79|     1.21|\n|cp_non_anginal               |         0|             1|    0|  1| -1.76|  0.57|  0.57|  0.57| 0.57| -1.20|    -0.57|\n|fbs_yes                      |         0|             1|    0|  1| -0.42| -0.42| -0.42| -0.42| 2.40|  1.98|     1.93|\n|rest_ecg_wave_abn            |         0|             1|    0|  1| -0.12| -0.12| -0.12| -0.12| 8.45|  8.33|    67.40|\n|rest_ecg_ventric_hypertrophy |         0|             1|    0|  1| -0.96| -0.96| -0.96|  1.04| 1.04|  0.08|    -1.99|\n|exer_ang_yes                 |         0|             1|    0|  1| -0.68| -0.68| -0.68|  1.48| 1.48|  0.80|    -1.37|\n|exer_st_slope_flat           |         0|             1|    0|  1| -0.97| -0.97| -0.97|  1.03| 1.03|  0.05|    -2.00|\n|exer_st_slope_downslope      |         0|             1|    0|  1| -0.23| -0.23| -0.23| -0.23| 4.36|  4.13|    15.06|\n|thal_fixeddefect             |         0|             1|    0|  1| -0.20| -0.20| -0.20| -0.20| 5.02|  4.82|    21.25|\n|thal_reversabledefect        |         0|             1|    0|  1| -0.82| -0.82| -0.82|  1.22| 1.22|  0.40|    -1.84|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_up <-   \n  logistic_reg(penalty = select_best(fits_glmnet_up, metric = \"bal_accuracy\")$penalty, \n               mixture = select_best(fits_glmnet_up, metric = \"bal_accuracy\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn_up)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nTo evaluate this model, we now need test features too\n\n- IMPORTANT: Test is NOT up-sampled\n- bake it as new data!\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_test <- rec_up_prep |> \n  bake(data_test)  \n\nfeat_test |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |feat_test |\n|Number of rows           |428       |\n|Number of columns        |18        |\n|_______________________  |          |\n|Column type frequency:   |          |\n|factor                   |1         |\n|numeric                  |17        |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate| n_unique|top_counts       |\n|:-------------|---------:|-------------:|--------:|:----------------|\n|disease       |         0|             1|        2|no: 381, yes: 47 |\n\n\n**Variable type: numeric**\n\n|skim_variable                | n_missing| complete_rate|  mean|   sd|    p0|   p25|   p50|   p75| p100|  skew| kurtosis|\n|:----------------------------|---------:|-------------:|-----:|----:|-----:|-----:|-----:|-----:|----:|-----:|--------:|\n|age                          |         0|             1| -0.07| 1.06| -2.26| -1.03| -0.14|  0.75| 2.53|  0.14|    -0.75|\n|rest_bp                      |         0|             1| -0.20| 0.91| -2.19| -0.73| -0.17|  0.40| 3.78|  0.69|     1.13|\n|chol                         |         0|             1| -0.10| 1.02| -2.36| -0.76| -0.27|  0.37| 6.11|  1.99|     8.98|\n|exer_max_hr                  |         0|             1|  0.22| 0.89| -3.35| -0.23|  0.37|  0.88| 1.91| -0.73|     0.32|\n|exer_st_depress              |         0|             1| -0.26| 0.89| -0.94| -0.94| -0.58|  0.15| 4.59|  1.69|     3.29|\n|ca                           |         0|             1| -0.33| 0.82| -0.74| -0.74| -0.74| -0.74| 2.53|  2.05|     3.44|\n|sex_male                     |         0|             1| -0.20| 1.06| -1.49| -1.49|  0.67|  0.67| 0.67| -0.39|    -1.85|\n|cp_atyp_ang                  |         0|             1|  0.09| 1.08| -0.45| -0.45| -0.45| -0.45| 2.24|  1.49|     0.21|\n|cp_non_anginal               |         0|             1| -0.11| 1.06| -1.76| -1.76|  0.57|  0.57| 0.57| -0.92|    -1.15|\n|fbs_yes                      |         0|             1| -0.05| 0.95| -0.42| -0.42| -0.42| -0.42| 2.40|  2.18|     2.77|\n|rest_ecg_wave_abn            |         0|             1|  0.00| 1.01| -0.12| -0.12| -0.12| -0.12| 8.45|  8.24|    66.02|\n|rest_ecg_ventric_hypertrophy |         0|             1| -0.08| 0.99| -0.96| -0.96| -0.96|  1.04| 1.04|  0.23|    -1.95|\n|exer_ang_yes                 |         0|             1| -0.22| 0.88| -0.68| -0.68| -0.68| -0.68| 1.48|  1.40|    -0.04|\n|exer_st_slope_flat           |         0|             1| -0.23| 0.97| -0.97| -0.97| -0.97|  1.03| 1.03|  0.53|    -1.72|\n|exer_st_slope_downslope      |         0|             1|  0.10| 1.19| -0.23| -0.23| -0.23| -0.23| 4.36|  3.29|     8.83|\n|thal_fixeddefect             |         0|             1|  0.01| 1.02| -0.20| -0.20| -0.20| -0.20| 5.02|  4.70|    20.11|\n|thal_reversabledefect        |         0|             1| -0.32| 0.88| -0.82| -0.82| -0.82| -0.82| 1.22|  1.17|    -0.64|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's see how this model performs in test\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_up <- \n  tibble(truth = feat_test$disease,\n         estimate = predict(fit_glmnet_up, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n\ncm_up |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.806\n 2 kap                  binary         0.390\n 3 sens                 binary         0.830\n 4 spec                 binary         0.803\n 5 ppv                  binary         0.342\n 6 npv                  binary         0.975\n 7 mcc                  binary         0.448\n 8 j_index              binary         0.633\n 9 bal_accuracy         binary         0.816\n10 detection_prevalence binary         0.266\n11 precision            binary         0.342\n12 recall               binary         0.830\n13 f_meas               binary         0.484\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_up <- tibble(truth = feat_test$disease,\n                prob = predict(fit_glmnet_up, feat_test, type = \"prob\")$.pred_yes)\n\nggplot(data = preds_up, aes(x = prob)) + \n   geom_histogram(bins = 15) +\n   facet_wrap(vars(truth), nrow = 2) +\n   xlab(\"Pr(Disease)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n### Down-sampling\n\nWe resample majority class observations within our training set to decrease/match the number of total observations of the minority class in the training set.\n\n- This selects a subset of the majority class\n- Our test (or validation) set(s) should NOT be resampled.  This is handled well by `step_downsample()`\n\n--------------------------------------------------------------------------------\n\nDown-sampling is part of feature engineering recipe\n\n- Need to specify the outcome (`disease`)\n- Can set `under_ratio` to values other than 1 if desired\n- Makes sense to do this after missing data imputation and dummy coding\n- Makes sense to do this before normalizing features \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_down <- recipe(disease ~ ., data = data_trn) |> \n  step_impute_median(all_numeric_predictors()) |> \n  step_impute_mode(all_nominal_predictors()) |>   \n  step_dummy(all_nominal_predictors()) |> \n  themis::step_downsample(disease, under_ratio = 1) |> \n  step_normalize(all_numeric_predictors())\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nNeed to re-tune model b/c the sample size has changed\n\nNeed to refit the final model to all of train\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_down <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec_down, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(bal_accuracy))\n  },\n  rerun = rerun_setting,\n  dir = \"cache/008/\",\n  file = \"fits_glmnet_down\")\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nReview hyperparameters\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet_down, hp1 = \"penalty\", hp2 = \"mixture\", \n                     metric = \"bal_accuracy\", log_hp1 = TRUE)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's fit this best model configuration to all of our training data and evaluate it in test\n\n- Note the use of `NULL` again when getting features for training data. Very important!\n- `step_downsample()` is not applied to baked data (See its default for `skip = TRUE` argument)\n- NOTE: sample size and ratio of yes/now for disease!\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_down_prep <- rec_down |> \n  prep(data_trn)\n\nfeat_trn_down <- rec_down_prep |> \n  bake(new_data = NULL)\n\nfeat_trn_down |> skim_some()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |              |\n|:------------------------|:-------------|\n|Name                     |feat_trn_down |\n|Number of rows           |184           |\n|Number of columns        |18            |\n|_______________________  |              |\n|Column type frequency:   |              |\n|factor                   |1             |\n|numeric                  |17            |\n|________________________ |              |\n|Group variables          |None          |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts      |\n|:-------------|---------:|-------------:|:-------|--------:|:---------------|\n|disease       |         0|             1|FALSE   |        2|yes: 92, no: 92 |\n\n\n**Variable type: numeric**\n\n|skim_variable                | n_missing| complete_rate|    p0| p100|\n|:----------------------------|---------:|-------------:|-----:|----:|\n|age                          |         0|             1| -2.85| 2.16|\n|rest_bp                      |         0|             1| -1.89| 3.50|\n|chol                         |         0|             1| -2.52| 3.34|\n|exer_max_hr                  |         0|             1| -2.56| 2.16|\n|exer_st_depress              |         0|             1| -0.87| 4.24|\n|ca                           |         0|             1| -0.74| 2.46|\n|sex_male                     |         0|             1| -1.55| 0.64|\n|cp_atyp_ang                  |         0|             1| -0.47| 2.09|\n|cp_non_anginal               |         0|             1| -1.78| 0.56|\n|fbs_yes                      |         0|             1| -0.47| 2.09|\n|rest_ecg_wave_abn            |         0|             1| -0.10| 9.51|\n|rest_ecg_ventric_hypertrophy |         0|             1| -0.99| 1.01|\n|exer_ang_yes                 |         0|             1| -0.64| 1.55|\n|exer_st_slope_flat           |         0|             1| -0.84| 1.19|\n|exer_st_slope_downslope      |         0|             1| -0.21| 4.68|\n|thal_fixeddefect             |         0|             1| -0.17| 5.97|\n|thal_reversabledefect        |         0|             1| -0.79| 1.26|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nNow fit the model to these downsampled training data\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_down <-   \n  logistic_reg(penalty = select_best(fits_glmnet_down, metric = \"bal_accuracy\")$penalty, \n               mixture = select_best(fits_glmnet_down, metric = \"bal_accuracy\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn_down)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's see how this model performs in test\n\n- First we need test features\n- IMPORTANT: Test is NOT down-sampled\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_test <- rec_down_prep |> \n  bake(data_test)\n\nfeat_test |> skim_some()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |feat_test |\n|Number of rows           |428       |\n|Number of columns        |18        |\n|_______________________  |          |\n|Column type frequency:   |          |\n|factor                   |1         |\n|numeric                  |17        |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts       |\n|:-------------|---------:|-------------:|:-------|--------:|:----------------|\n|disease       |         0|             1|FALSE   |        2|no: 381, yes: 47 |\n\n\n**Variable type: numeric**\n\n|skim_variable                | n_missing| complete_rate|    p0| p100|\n|:----------------------------|---------:|-------------:|-----:|----:|\n|age                          |         0|             1| -2.29| 2.49|\n|rest_bp                      |         0|             1| -2.25| 3.97|\n|chol                         |         0|             1| -2.52| 6.30|\n|exer_max_hr                  |         0|             1| -3.27| 1.83|\n|exer_st_depress              |         0|             1| -0.87| 4.78|\n|ca                           |         0|             1| -0.74| 2.46|\n|sex_male                     |         0|             1| -1.55| 0.64|\n|cp_atyp_ang                  |         0|             1| -0.47| 2.09|\n|cp_non_anginal               |         0|             1| -1.78| 0.56|\n|fbs_yes                      |         0|             1| -0.47| 2.09|\n|rest_ecg_wave_abn            |         0|             1| -0.10| 9.51|\n|rest_ecg_ventric_hypertrophy |         0|             1| -0.99| 1.01|\n|exer_ang_yes                 |         0|             1| -0.64| 1.55|\n|exer_st_slope_flat           |         0|             1| -0.84| 1.19|\n|exer_st_slope_downslope      |         0|             1| -0.21| 4.68|\n|thal_fixeddefect             |         0|             1| -0.17| 5.97|\n|thal_reversabledefect        |         0|             1| -0.79| 1.26|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nGet metrics in test\n\n::: {.cell}\n\n```{.r .cell-code}\ncm_down <- \n  tibble(truth = feat_test$disease,\n         estimate = predict(fit_glmnet_down, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n\ncm_down |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.806\n 2 kap                  binary         0.390\n 3 sens                 binary         0.830\n 4 spec                 binary         0.803\n 5 ppv                  binary         0.342\n 6 npv                  binary         0.975\n 7 mcc                  binary         0.448\n 8 j_index              binary         0.633\n 9 bal_accuracy         binary         0.816\n10 detection_prevalence binary         0.266\n11 precision            binary         0.342\n12 recall               binary         0.830\n13 f_meas               binary         0.484\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nAnd plot faceted probabilites\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_down <- tibble(truth = feat_test$disease,\n                prob = predict(fit_glmnet_down, feat_test, type = \"prob\")$.pred_yes)\n\nggplot(data = preds_down, aes(x = prob)) + \n   geom_histogram(bins = 15) +\n   facet_wrap(vars(truth), nrow = 2) +\n   xlab(\"Pr(Disease)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/u8-bal-15-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\n### SMOTE\n\nA third approach to resampling is called the synthetic minority over-sampling technique (SMOTE)\n\nTo up-sample the minority class, SMOTE synthesizes new observations.  \n\n- To do this, an observation is randomly selected from the minority class.  \n- This observation's K-nearest neighbors (KNNs) are then determined. \n- The new synthetic observation retains the outcome but a random combination of the predictors values from the randomly selected observation and its neighbors.  \n\n--------------------------------------------------------------------------------\n\nThis is easily implemented by recipe in `tidymodels` using `step_smote()`\n\n- Need to specify the outcome (`disease`)\n- Can set `over_ratio` to values other than 1 (default) if desired\n- Can set `neighbors` to values other than 5 (default) if desired\n- Makes sense to do this after missing data imputation and dummy coding\n- Other features will need to be scaled/range-corrected prior to use (for distance)\n- Makes sense to do this before normalizing features for glmnet, etc \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_smote <- recipe(disease ~ ., data = data_trn) |> \n  step_impute_median(all_numeric_predictors()) |> \n  step_impute_mode(all_nominal_predictors()) |>   \n  step_dummy(all_nominal_predictors()) |>\n  step_range(all_predictors()) |> \n  themis::step_smote(disease, over_ratio = 1, neighbors = 5) |> \n  step_normalize(all_numeric_predictors())\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nNeed to re-tune model b/c the sample size has changed\n\nNeed to refit the final model to all of train\n\n::: {.cell}\n\n```{.r .cell-code}\nfits_glmnet_smote <- cache_rds(\n  expr = {\n    logistic_reg(penalty = tune(), \n                 mixture = tune()) |> \n      set_engine(\"glmnet\") |> \n      set_mode(\"classification\") |> \n      tune_grid(preprocessor = rec_smote, \n                resamples = splits_boot, grid = grid_glmnet, \n                metrics = metric_set(bal_accuracy))\n  },\n  rerun = rerun_setting,\n  dir = \"cache/008/\",\n  file = \"fits_glmnet_smote\")\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nReview hyperparameters\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hyperparameters(fits_glmnet_smote, hp1 = \"penalty\", hp2 = \"mixture\", \n                     metric = \"bal_accuracy\", log_hp1 = TRUE)\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's fit this best model configuration to all of our training data and evaluate it in test\n\n- Note the use of `NULL` (once again!) for `new_data`\n- `step_smote()` is not applied to new data\n- NOTE: sample size and outcome balance\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_smote_prep <- rec_smote |> \n  prep(data_trn)\n\nfeat_trn_smote <- rec_smote_prep |> \n  bake(NULL)\n\nfeat_trn_smote |> skim_some()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |               |\n|:------------------------|:--------------|\n|Name                     |feat_trn_smote |\n|Number of rows           |1522           |\n|Number of columns        |18             |\n|_______________________  |               |\n|Column type frequency:   |               |\n|factor                   |1              |\n|numeric                  |17             |\n|________________________ |               |\n|Group variables          |None           |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts        |\n|:-------------|---------:|-------------:|:-------|--------:|:-----------------|\n|disease       |         0|             1|FALSE   |        2|yes: 761, no: 761 |\n\n\n**Variable type: numeric**\n\n|skim_variable                | n_missing| complete_rate|    p0|  p100|\n|:----------------------------|---------:|-------------:|-----:|-----:|\n|age                          |         0|             1| -2.97|  2.57|\n|rest_bp                      |         0|             1| -2.38|  3.72|\n|chol                         |         0|             1| -2.51|  6.44|\n|exer_max_hr                  |         0|             1| -2.84|  2.42|\n|exer_st_depress              |         0|             1| -1.00|  4.71|\n|ca                           |         0|             1| -0.78|  2.73|\n|sex_male                     |         0|             1| -1.60|  0.64|\n|cp_atyp_ang                  |         0|             1| -0.45|  2.29|\n|cp_non_anginal               |         0|             1| -1.81|  0.57|\n|fbs_yes                      |         0|             1| -0.42|  2.52|\n|rest_ecg_wave_abn            |         0|             1| -0.11| 11.37|\n|rest_ecg_ventric_hypertrophy |         0|             1| -0.98|  1.05|\n|exer_ang_yes                 |         0|             1| -0.68|  1.50|\n|exer_st_slope_flat           |         0|             1| -0.97|  1.06|\n|exer_st_slope_downslope      |         0|             1| -0.24|  4.71|\n|thal_fixeddefect             |         0|             1| -0.19|  5.75|\n|thal_reversabledefect        |         0|             1| -0.89|  1.18|\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nFit model to smote sampled training data\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_glmnet_smote <-   \n  logistic_reg(penalty = select_best(fits_glmnet_smote, metric = \"bal_accuracy\")$penalty, \n               mixture = select_best(fits_glmnet_smote, metric = \"bal_accuracy\")$mixture) |> \n  set_engine(\"glmnet\") |> \n  set_mode(\"classification\") |> \n  fit(disease ~ ., data = feat_trn_smote)\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\nLet's see how this model performs in test\n\n- IMPORTANT: Test is NOT SMOTE up-sampled\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_test <- rec_smote_prep |> \n  bake(data_test)\n\ncm_smote <- \n  tibble(truth = feat_test$disease,\n         estimate = predict(fit_glmnet_smote, feat_test)$.pred_class) |> \n  conf_mat(truth, estimate)\n\ncm_smote |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.811\n 2 kap                  binary         0.390\n 3 sens                 binary         0.809\n 4 spec                 binary         0.811\n 5 ppv                  binary         0.345\n 6 npv                  binary         0.972\n 7 mcc                  binary         0.443\n 8 j_index              binary         0.620\n 9 bal_accuracy         binary         0.810\n10 detection_prevalence binary         0.257\n11 precision            binary         0.345\n12 recall               binary         0.809\n13 f_meas               binary         0.484\n```\n\n\n:::\n:::\n\n\n--------------------------------------------------------------------------------\n\nPlot faceted predicted probabilites\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_smote <- tibble(truth = feat_test$disease,\n                prob = predict(fit_glmnet_smote, feat_test, type = \"prob\")$.pred_yes)\n\nggplot(data = preds_smote, aes(x = prob)) + \n   geom_histogram(bins = 15) +\n   facet_wrap(vars(truth), nrow = 2) +\n   xlab(\"Pr(Disease)\")\n```\n\n::: {.cell-output-display}\n![](l08_advanced_performance_metrics_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::",
    "supporting": [
      "l08_advanced_performance_metrics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}