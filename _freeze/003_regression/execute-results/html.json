{
  "hash": "84639470b2679bccaed17711faf91ad8",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Introduction to Regression Models\n\n## Overview of Unit\n\n### Learning Objectives\n  \n- Use of root mean square error (RMSE) in training and validation sets for model performance evaluation\n\n- The General Linear Model as a machine learning model\n  - Extensions to categorical variables (Dummy coding features)\n  - Extensions to interactive and non-linear effects of features\n  \n- K Nearest Neighbor (KNN)\n  - Hyperparameter $k$\n  - Scaling predictors\n  - Extensions to categorical variables\n\n-----\n\n### Readings\n\n- @ISL [Chapter 3, pp 59 - 109](pdfs/isl_2.pdf)\n\nPost  questions to the Readings channel in Slack\n\n### Lecture Videos\n  \n- [Lecture 1: Overview](https://mediaspace.wisc.edu/media/iaml+unit+3-1/1_76q87xgn) ~ 13 mins\n- [Lecture 2: The Simple Linear Model, Part 1](https://mediaspace.wisc.edu/media/iaml+unit+3-2/1_yyb8dcub) ~ 16 mins\n- [Lecture 3: The Simple Linear Model, Part 2](https://mediaspace.wisc.edu/media/iaml+unit+3-3/1_ep9ibptc) ~ 12 mins \n- [Lecture 4: Extension to Multiple Predictors](https://mediaspace.wisc.edu/media/iaml+Unit+3-4/1_24rrga7b) ~ 15 mins\n- [Lecture 5: Extension to Categorical Predictors](https://mediaspace.wisc.edu/media/iaml+unit+3-5/1_2a3tsj3n) ~ 30 mins\n- [Lecture 6: Extension to Interactions and Non-Linear Effects](https://mediaspace.wisc.edu/media/iaml+unit+3-6/1_yo48m37z) ~ 11 mins\n- [Lecture 7: Introduction to KNN](https://mediaspace.wisc.edu/media/iaml+unit+3-7/1_ega1aohm) ~ 9 mins\n- [Lecture 8: The hyperparameter k](https://mediaspace.wisc.edu/media/iaml+unit+3-8/1_xc8x13en) ~ 13 mins\n- [Lecture 9: Distance and Scaling in KNN](https://mediaspace.wisc.edu/media/iaml+unit+3-9/1_jk95tgms) ~ 9 mins\n- [Lecture 10: KNN with Ames](https://mediaspace.wisc.edu/media/iaml+unit+3-10/1_klo7ody6) ~ 12 mins\n\nPost questions to the video-lectures channel in Slack\n\n-----\n\n### Application Assignment and Quiz\n  \n- clean data: [train](application_assignments/unit_03/ames_train_cln.csv); [validate](application_assignments/unit_03/ames_val_cln.csv); [test](application_assignments/unit_03/ames_test_cln.csv)\n- [data dictionary](application_assignments/unit_03/ames_data_dictionary.pdf)\n- [lm qmd](https://raw.githubusercontent.com/jjcurtin/book_iaml/main/application_assignments/unit_03/hw_unit_03_lm.qmd)\n- [knn qmd](https://raw.githubusercontent.com/jjcurtin/book_iaml/main/application_assignments/unit_03/hw_unit_03_knn.qmd)\n- solution: [lm](https://dionysus.psych.wisc.edu/iaml/key_unit_03_lm.html); [knn](https://dionysus.psych.wisc.edu/iaml/key_unit_03_knn.html)\n\nPost questions to the application-assignments channel in Slack\n\nSubmit the application assignment [here](https://canvas.wisc.edu/courses/395546/assignments/2187688) and complete the [unit quiz](https://canvas.wisc.edu/courses/395546/quizzes/514046) by 8 pm on Wednesday, February 7th\n\n-----\n\nOur goal in this unit is to build a machine learning regression model that can accurately (we hope) predict the `sale_price` for future sales of houses (in Iowa? more generally?)\n\nTo begin this project we need to:\n\n- Set up conflicts policies\n- We will hide this in future units\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(conflicts.policy = \"depends.ok\")\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ SHA-1 hash of file is \"77e91675366f10788c6bcb59fa1cfc9ee0c75281\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntidymodels_conflictRules()\n```\n:::\n\n\n-----\n\n- Load the packages we will need.  I am shifting here to only loading `tidymodels` and `tidyverse` because the other functions we need are only called occasionally (so we will call them by namespace to see how that \"feels\".)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # for general data wrangling\nlibrary(tidymodels) # for modeling\n```\n:::\n\n\n-----\n\n- source additional class functions libraries\n- We will hide this in future units\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ SHA-1 hash of file is \"c045eee2655a18dc85e715b78182f176327358a7\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ SHA-1 hash of file is \"def6ce26ed7b2493931fde811adff9287ee8d874\"\n```\n\n\n:::\n:::\n\n\n- set display options\n- We will hide this in future units\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_classic())\noptions(tibble.width = Inf)\n```\n:::\n\n\n- handle paths\n\n::: {.cell}\n\n```{.r .cell-code}\npath_data <- \"./data\"\n```\n:::\n\n\n-----\n\n- Set up function to class ames data (copied with one improvement from last unit)\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_ames <- function(df){\n  df |>\n    mutate(across(where(is.character), factor)) |> \n    mutate(overall_qual = factor(overall_qual, levels = 1:10), \n           garage_qual = suppressWarnings(fct_relevel(garage_qual, # <1> \n                                                      c(\"no_garage\", \"po\", \"fa\", \n                                                    \"ta\", \"gd\", \"ex\"))))\n}\n```\n:::\n\n1. Warnings should be considered errors until investigated.  Once investigated, they can be ignored.  To explicitly ignore, use `suppressWarnings()`\n\n-----\n\n- Open the cleaned training set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn <- \n  read_csv(here::here(path_data, \"ames_clean_class_trn.csv\"), \n           col_types = cols()) |>  \n  class_ames() |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,465\nColumns: 10\n$ sale_price   <dbl> 105000, 126000, 115000, 120000, 99500, 112000, 122000, 12…\n$ gr_liv_area  <dbl> 896, 882, 864, 836, 918, 1902, 900, 1225, 1728, 858, 1306…\n$ lot_area     <dbl> 11622, 8400, 10500, 2280, 7892, 8930, 9819, 9320, 13260, …\n$ year_built   <dbl> 1961, 1970, 1971, 1975, 1979, 1978, 1967, 1959, 1962, 195…\n$ overall_qual <fct> 5, 4, 4, 7, 6, 6, 5, 4, 5, 5, 3, 5, 4, 5, 3, 5, 2, 6, 5, …\n$ garage_cars  <dbl> 1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 1, …\n$ garage_qual  <fct> ta, ta, no_garage, ta, ta, ta, ta, no_garage, no_garage, …\n$ ms_zoning    <fct> res_high, res_low, res_low, res_low, res_low, res_med, re…\n$ lot_config   <fct> inside, corner, fr2, fr2, inside, inside, inside, inside,…\n$ bldg_type    <fct> one_fam, one_fam, one_fam, town_inside, town_end, duplex,…\n```\n\n\n:::\n:::\n\n\n-----\n\n- Open the cleaned validation set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_val <- read_csv(here::here(path_data, \"ames_clean_class_val.csv\"),\n                     col_types = cols()) |> \n  class_ames() |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 490\nColumns: 10\n$ sale_price   <dbl> 215000, 189900, 189000, 171500, 212000, 164000, 394432, 1…\n$ gr_liv_area  <dbl> 1656, 1629, 1804, 1341, 1502, 1752, 1856, 1004, 1092, 106…\n$ lot_area     <dbl> 31770, 13830, 7500, 10176, 6820, 12134, 11394, 11241, 168…\n$ year_built   <dbl> 1960, 1997, 1999, 1990, 1985, 1988, 2010, 1970, 1971, 197…\n$ overall_qual <fct> 6, 5, 7, 7, 8, 8, 9, 6, 5, 6, 7, 9, 8, 8, 7, 8, 6, 5, 5, …\n$ garage_cars  <dbl> 2, 2, 2, 2, 2, 2, 3, 2, 1, 2, 2, 2, 2, 3, 2, 3, 1, 1, 2, …\n$ garage_qual  <fct> ta, ta, ta, ta, ta, ta, ta, ta, ta, ta, ta, ta, ta, ta, t…\n$ ms_zoning    <fct> res_low, res_low, res_low, res_low, res_low, res_low, res…\n$ lot_config   <fct> corner, inside, inside, inside, corner, inside, corner, c…\n$ bldg_type    <fct> one_fam, one_fam, one_fam, one_fam, town_end, one_fam, on…\n```\n\n\n:::\n:::\n\n\n**NOTE**: Remember, I have held back an additional test set that we will use only once to evaluate the final model that we each develop in this unit.\n\n-----\n\nWe will also make a dataframe to track validation error across the models we fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_val <- tibble(model = character(), rmse_val = numeric()) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 0\nColumns: 2\n$ model    <chr> \n$ rmse_val <dbl> \n```\n\n\n:::\n:::\n\n\n-----\n\nWe will fit regression models with various model configurations.\n\nThese configurations will differ with respect to statistical algorithm:\n\n- A General Linear Model (lm) - a parametric approach\n- K Nearest Neighbor (KNN) - a non-parametric approach\n\nThese configurations will differ with respect to the features\n\n- Single feature (i.e., simple regression)\n- Various sets of multiple features that vary by:\n  - Raw predictors used\n  - Transformations applied to those predictors as part of feature engineering\n  - Inclusion (or not) of interactions among features\n\n- The KNN model configurations will also differ with respect to its hyperparameter- $k$\n\n-----\n\nTo build models that will work well in new data (e.g., the data that I have held back from you so far):\n\n- We have split the remaining data into a training and validation set for our own use during model building\n\n- We will fit models in train\n\n- We will evaluate them in validation\n\n\nRemember that we:\n\n- Used a 75/25 stratified (on `sale_price`) split of the data at the end of cleaning EDA to create training and validation sets\n- Are only using a subset of the available predictors.  The same ones I used for the EDA unit\n\nYou will work with all of my predictors and all the predictors you used for your EDA when you do the application assignment for this unit\n\n-----\n\nPause for a moment to answer this question: \n\n::: {.callout-important collapse=\"false\"}\n### Question: Why do we need independent validation data to select the best model configuration?  In other words, why cant we just fit and evaluate all of the models in our one training set?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nThese models will all overfit the dataset within which they are fit to some degree.   \nIn other words, they will predict both systematic variance (the DGP) and some noise in \nthe training set.  However, they will differ in how much they overfit the training set.   \nAs the models get more flexible they will have the potential to overfit to a greater degree.\nModels with a larger number of features (e.g., more predictors, features based on interactions\nas well as raw predictors) will overfit to a greater degree.  All other things equal, the\nnon-parametric KNN will also be more flexible than the general linear model so it may \noverfit to a greater degree as well if the true DGP is linear on the features.  \nTherefore, just because a model fits the training set well does not mean it will work \nwell in new data because the noise will be different in every new dataset.  \nThis overfitting will be removed from our performance estimate if we calculate it \nwith new data (the validation set).\n```\n:::\n\n:::\n-----\n\nLet's take a quick look at the available raw predictors in the training set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |data_trn |\n|Number of rows           |1465     |\n|Number of columns        |10       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|factor                   |5        |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate| n_unique|top_counts                            |\n|:-------------|---------:|-------------:|--------:|:-------------------------------------|\n|overall_qual  |         0|             1|       10|5: 424, 6: 350, 7: 304, 8: 176        |\n|garage_qual   |         0|             1|        5|ta: 1312, no_: 81, fa: 57, gd: 13     |\n|ms_zoning     |         0|             1|        7|res: 1157, res: 217, flo: 66, com: 13 |\n|lot_config    |         0|             1|        5|ins: 1095, cor: 248, cul: 81, fr2: 39 |\n|bldg_type     |         0|             1|        5|one: 1216, tow: 108, dup: 63, tow: 46 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|-----:|--------:|\n|sale_price    |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000|  1.64|     4.60|\n|gr_liv_area   |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642|  1.43|     5.19|\n|lot_area      |         0|             1|  10144.16|  8177.55|  1476|   7500|   9375|  11362| 164660| 11.20|   182.91|\n|year_built    |         0|             1|   1971.35|    29.65|  1880|   1953|   1972|   2000|   2010| -0.54|    -0.62|\n|garage_cars   |         1|             1|      1.78|     0.76|     0|      1|      2|      2|      4| -0.26|     0.10|\n\n\n:::\n:::\n\n\n-----\n\nRemember from our modeling EDA that we have some issues to address as part of our feature engineering:\n\n- Missing values\n- Possible transformation of `sale_price`\n- Possible transformation of other numeric predictors\n- We will need to use some feature engineering techniques to handle categorical variables\n- We may need to consider interactions among features\n\nAll of this will be accomplished with a recipe\n\nBut first, let's discuss/review our first statistical algorithm\n\n-----\n\n## The Simple (General) Linear Model (LM)\n\nWe will start with only a quick review of the use of the simple (one feature) linear model (LM) as a machine learning model because you should be very familiar with this statistical model at this point\n\n- $Y = \\beta_0 + \\beta_1*X_1 + \\epsilon$\n\nApplied to our regression problem, we might fit a model such as:\n\n- $sale\\_price = \\beta_0 + \\beta_1*gr\\_liv\\_area + \\epsilon$\n\nThe (general) linear model is a parametric model.  We need to estimate two parameters using our training set\n\n- $\\beta_0$ \n- $\\beta_1$\n\nYou already know how to do this using `lm()` in base R.  However, we will use the `tidymodels` modeling approach.\n\n-----\n\nWe use `tidymodels` because:\n\n- It provides a consistent interface to many (and growing numbers) of statistical algorithms\n- It provides very strong and easy feature engineering routines (e.g., missing data, scaling, transformations, near-zero variance, collinearity) via recipes\n- It simplifies model performance evaluation using resampling approaches (that you don't know yet!)\n- It supports numerous performance metrics\n- It is tightly integrated within the tidyverse\n- It is under active development and support\n- You can see documentation for all of the packages at the [tidymodels website](https://www.tidymodels.org/).  It is worth a quick review now to get a sense of what is available\n\n-----\n\nTo fit a model with a specific configuration, we need to: \n\n- Set up a feature engineering recipe\n- Use the recipe to make a feature matrix\n  - `prep()` it with training data\n  - `bake()` it with data you want to use to calculate feature matrix\n- Select and define the statistical algorithm\n- Fit the algorithm in the feature matrix in our training set\n\nThese steps are accomplished with functions from the [recipes](https://recipes.tidymodels.org/) and [parsnip](https://parsnip.tidymodels.org/reference/index.html) packages.\n\n-----\n\nWe will start with a simple model configuration\n\n- General linear model (lm)\n- One feature (raw `gr_liv_area`)\n- Fit in training data\n\n-----\n\nSet up a VERY SIMPLE feature engineering recipe\n\n- Include outcome on the left size of `~`\n- Include raw predictors (not yet features) on the right side of `~`.  \n- Indicate the training data\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area, data = data_trn) \n```\n:::\n\n\n\n- We can see a summary of it to verify it is doing what you expect by calling\n  - `rec`\n  - `summary(rec)`\n  \n-----\n\nWe can then prep the recipe and bake the data to make our feature matrix from the training dataset\n\n- Again, remember we always prep a recipe with training data but use the prepped recipe to bake any data\n- In this instance we will prep with `data_trn` and then bake `data_trn` so that we have features from our training set to train/fit the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(training = data_trn)\n```\n:::\n\n\n-----\n\n- And now  we can bake the training data to make a feature matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn <- rec_prep |> \n  bake(new_data = data_trn)\n```\n:::\n\n\n-----\n\nYou should always review the feature matrix to make sure it looks as you expect\n\n- includes outcome (`sale_price`)\n- includes expected feature (`gr_liv_area`)\n- Sample size is as expected\n- No missing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |2        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |2        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100| skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|----:|--------:|\n|gr_liv_area   |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642| 1.43|     5.19|\n|sale_price    |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000| 1.64|     4.60|\n\n\n:::\n:::\n\n\n-----\n\nNow let's consider the statistical algorithm\n\n- `tidymodels` breaks this apart into two pieces for clarity\n- First, you specify the broad category of algorithm\n  - e.g., `linear_reg()`, `nearest_neighbor()`, `logistic_reg()`\n- Next, you `set_mode()` to indicate if if the model is for regression or classification broadly\n  - Not needed if the engine can only be used for one mode (e.g., `'linear_reg()` is only for regression.\n- Then you select a function from a specific R package (or base R) that will implement the algorithm\n  - `tidymodels` calls this setting the engine\n  - e.g., `lm`, `kknn`, `glm`, `glmnet`\n\n-----\n\nYou can see the available engines (and modes: regression vs. classification) for the broad classes of algorithms\n\nWe will work with many of these algorithms later in the course\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_engines(\"linear_reg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  engine mode      \n  <chr>  <chr>     \n1 lm     regression\n2 glm    regression\n3 glmnet regression\n4 stan   regression\n5 spark  regression\n6 keras  regression\n7 brulee regression\n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"nearest_neighbor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  engine mode          \n  <chr>  <chr>         \n1 kknn   classification\n2 kknn   regression    \n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"logistic_reg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  engine    mode          \n  <chr>     <chr>         \n1 glm       classification\n2 glmnet    classification\n3 LiblineaR classification\n4 spark     classification\n5 keras     classification\n6 stan      classification\n7 brulee    classification\n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"decision_tree\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  engine mode          \n  <chr>  <chr>         \n1 rpart  classification\n2 rpart  regression    \n3 C5.0   classification\n4 spark  classification\n5 spark  regression    \n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"rand_forest\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  engine       mode          \n  <chr>        <chr>         \n1 ranger       classification\n2 ranger       regression    \n3 randomForest classification\n4 randomForest regression    \n5 spark        classification\n6 spark        regression    \n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"mlp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  engine mode          \n  <chr>  <chr>         \n1 keras  classification\n2 keras  regression    \n3 nnet   classification\n4 nnet   regression    \n5 brulee classification\n6 brulee regression    \n```\n\n\n:::\n:::\n\n\n-----\n\nYou can load even more engines from the `discrim` package.  We will use some of these later too.  You need to load the package to use these engines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(discrim, exclude = \"smoothness\") # needed for these engines\n\nshow_engines(\"discrim_linear\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  engine        mode          \n  <chr>         <chr>         \n1 MASS          classification\n2 mda           classification\n3 sda           classification\n4 sparsediscrim classification\n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"discrim_regularized\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  engine mode          \n  <chr>  <chr>         \n1 klaR   classification\n```\n\n\n:::\n\n```{.r .cell-code}\nshow_engines(\"naive_Bayes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  engine     mode          \n  <chr>      <chr>         \n1 klaR       classification\n2 naivebayes classification\n```\n\n\n:::\n:::\n\n\n-----\n\nYou can also better understand how the engine will be called using `translate()`\n\nNot useful here but will be with more complicated algorithms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |> \n  set_engine(\"lm\") |> \n  translate()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\nModel fit template:\nstats::lm(formula = missing_arg(), data = missing_arg(), weights = missing_arg())\n```\n\n\n:::\n:::\n\n\n-----\n\nLet's combine our feature matrix with an algorithm to fit a model in our training set using only raw `gr_liv_area` as a feature\n\nNote the specification of\n\n- The category of algorithm\n- The engine (no need to set mode of engine b/c `lm` are only for the regression mode)\n- The use of the `.` to indicate all features in the matrix.\n  - not that useful here because there is only one feature: `gr_liv_area`\n  - will be useful when we have **many** features in the matrix\n- We use the the feature matrix (rather than raw data) from the training set to fit the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_1 <- \n  linear_reg() |> # <1> \n  set_engine(\"lm\") |> # <2> \n  fit(sale_price ~ ., data = feat_trn) # <3>\n```\n:::\n\n1. category of algorithm\n2. engine\n3. use of `.` for all features and use of feature matrix from training set\n\n-----\n\nWe can get the parameter estimates, standard errors, and statistical tests for each $\\beta$ = 0 for this model using `tidy()` from the `broom` package (loaded as part of the `tidyverse`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_1 |>  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)   16561.   4537.        3.65 2.72e-  4\n2 gr_liv_area     109.      2.85     38.2  4.78e-222\n```\n\n\n:::\n:::\n\n\n-----\n\nThere are a variety of ways to pull out the estimates for each feature (and intercept)\n\nOption 1: Pull all estimates from the tidy object\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_1 |> \n  tidy() |> \n  pull(estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16560.9991   108.9268\n```\n\n\n:::\n:::\n\n\n-----\n\nOption 2: Extract a single estimate using $ and row number.  Be careful that order of features won't change!  This assumes the feature coefficient for the relevant feature is **always** the second coefficient.\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(fit_lm_1)$estimate[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 108.9268\n```\n\n\n:::\n:::\n\n\n-----\n\nOption 3: Filter tidy df to the relevant row (using term ==) and pull the estimate. Safer!\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_1 |> \n  tidy() |> \n  filter(term == \"gr_liv_area\") |> \n  pull(estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 108.9268\n```\n\n\n:::\n:::\n\n\n-----\n\nOption 4: Write a function if we plan to do this a lot.  We include this function in the `fun_ml.R` script in our repo.   Better still (safe and code efficient)!\n\n::: {.cell}\n\n```{.r .cell-code}\nget_estimate <- function(the_fit, the_term){\n  the_fit |> \n    tidy() |> \n    filter(term == the_term) |> \n    pull(estimate)\n}\n```\n:::\n\n\nand then use this function\n\n::: {.cell}\n\n```{.r .cell-code}\nget_estimate(fit_lm_1, \"gr_liv_area\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 108.9268\n```\n\n\n:::\n\n```{.r .cell-code}\nget_estimate(fit_lm_1, \"(Intercept)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16561\n```\n\n\n:::\n:::\n\n\n-----\n\nRegardless of the method, we now have a simple parametric model for `sale_price`\n\n\n\n\n$\\hat{sale\\_price} = 1.6561\\times 10^{4} + 108.9 * gr\\_liv\\_area$\n\n-----\n\nWe can get the predicted values for `sale_price` (i.e., $\\hat{sale\\_price}$) in our validation set using `predict()`\n\nHowever, we first need to make a feature matrix for our validation set\n\n- We use the same recipe that we previously prepped with training data (`data_trn`)\n- But now we **bake** the validation data, `data_val`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val <- rec_prep |> \n  bake(new_data = data_val)\n```\n:::\n\n\n-----\n\nAs always, we should skim these new features\n\n- Sample size matches what we expect for validation set\n- No missing data\n- Includes expected outcome and features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_val |\n|Number of rows           |490      |\n|Number of columns        |2        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |2        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|     mean|       sd|    p0|      p25|    p50|      p75|   p100| skew| kurtosis|\n|:-------------|---------:|-------------:|--------:|--------:|-----:|--------:|------:|--------:|------:|----:|--------:|\n|gr_liv_area   |         0|             1|   1493.0|   483.78|   480|   1143.5|   1436|   1729.5|   3608| 0.92|     1.16|\n|sale_price    |         0|             1| 178512.8| 75493.59| 35311| 129125.0| 160000| 213000.0| 556581| 1.42|     2.97|\n\n\n:::\n:::\n\n\n-----\n\nNow we can get predictions using our model with validation features\n\n`predict()` returns a dataframe with one column named `.pred` and one row for every observation in dataframe (e.g., validation feature set)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(fit_lm_1, feat_val)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 490 × 1\n     .pred\n     <dbl>\n 1 196944.\n 2 194003.\n 3 213065.\n 4 162632.\n 5 180169.\n 6 207401.\n 7 218729.\n 8 125923.\n 9 135509.\n10 133004.\n# ℹ 480 more rows\n```\n\n\n:::\n:::\n\n\n-----\n\nWe can visualize how well this model performs in the validation set by plotting predicted `sale_price` ($\\hat{sale\\_price}$) vs. `sale_price` (**ground truth** in machine learning terminology) for these data\n\nWe might do this a lot so let's write a function.  We have also included this function in `fun_ml.R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth <- function(truth, estimate) {\n  ggplot(mapping = aes(x = truth, y = estimate)) + \n    geom_abline(lty = 2, color = \"red\") + \n    geom_point(alpha = 0.5) + \n    labs(y = \"predicted outcome\", x = \"outcome\") +\n    coord_obs_pred()   # scale axes uniformly (from tune package)\n}\n```\n:::\n\n\n-----\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n           estimate = predict(fit_lm_1, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-simple-15-1.png){width=672}\n:::\n:::\n\n\nPerfect performance would have all the points right on the dotted line (same value for actual and predicted outcome)\n\n- Our model doesn't do that well yet.  Not surprising\n- Pattern also has some indication of fanning of residuals AND some non-linearity with higher outcome scores that suggests need for a power transformation of outcome (e.g., log)\n- This is consistent with our earlier modeling EDA\n- Perhaps not that bad here b/c both `sale_price` and `gr_liv_area` were positively skewed\n- We will need consider this eventually\n\n-----\n\nWe can quantify model performance by selecting a performance metric\n\n- The `yardstick` package within the `tidymodels` framework supports calculation of many performance metrics for regression and classification models\n- See the [list](https://yardstick.tidymodels.org/reference/index.html) of all currently available metrics\n\nRoot mean square error (RMSE) is a common performance metric for regression models\n\n- You focused on a related metric, sum of squared error (SSE), in PSY 610/710\n- RMSE simply divides SSE by N (to get mean squared error; MSE) and then takes the square root to return the metric to the original units for the outcome variable\n- It is easy to calculate using `rmse_vec()` from the `yardstick` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(truth = feat_val$sale_price, \n         estimate = predict(fit_lm_1, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 51375.08\n```\n\n\n:::\n:::\n\n\n-----\n\nLet's record how well this model performed in validation so we can compare it to subsequent models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_val <- bind_rows(error_val, \n                       tibble(model = \"simple linear model\", \n                              rmse_val = rmse_vec(truth = feat_val$sale_price, \n                                                  estimate = predict(fit_lm_1,\n                                                                     feat_val)$.pred)))\nerror_val\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  model               rmse_val\n  <chr>                  <dbl>\n1 simple linear model   51375.\n```\n\n\n:::\n:::\n\n\nNOTE: I will continue to bind RMSE to this dataframe for newer models but plan to hide this code chuck to avoid distractions.  You can reuse this code repeatedly to track your own models if you like.  (Perhaps we should write a function??)\n\n-----\n\nFor explanatory purposes, we might want to visualize the relationship between a feature and the outcome (in addition to examining the parameter estimates and the associated statistical tests)\n\n- Here is a plot of $\\hat{sale\\_price}$ by `gr_liv_area` superimposed over a scatterplot of the raw data from the validation set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val |> \n  ggplot(aes(x = gr_liv_area)) +\n    geom_point(aes(y = sale_price), color = \"gray\") +\n    geom_line(aes(y = predict(fit_lm_1, data_val)$.pred), \n              linewidth = 1.25, color = \"blue\") + \n    ggtitle(\"Validation Set\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-simple-18-1.png){width=672}\n:::\n:::\n\n\n- As expected, there is a moderately strong positive relationship between `gr_liv_area` and `sale_price`.  \n- We can also again see the heteroscadasticity in the errors that might be corrected by a power transformation of `sale_price` (or `gr_liv_area`)  \n\n-----\n\n## Extension of LM to Multiple Predictors\n\nWe can improve model performance by moving from simple linear model to a linear model with multiple features derived from multiple predictors\n\nWe have many other numeric variables available to use, even in this pared down version of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |>  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"sale_price\"   \"gr_liv_area\"  \"lot_area\"     \"year_built\"   \"overall_qual\"\n [6] \"garage_cars\"  \"garage_qual\"  \"ms_zoning\"    \"lot_config\"   \"bldg_type\"   \n```\n\n\n:::\n:::\n\n\nLet's expand our model to also include `lot_area`, `year_built`, and `garage_cars`\n\nAgain, we need:\n\n- A feature engineering recipe\n- Training (and eventually validation) feature matrices\n- An algorithm to fit in training feature matrix\n\n-----\n\nWith the addition of new predictors, we now have a feature engineering task\n\n- We have missing data on `garage_cars` in the training set\n- We need to decide how we will handle it\n\nA simple solution is to do median imputation - substitute the median of the non-missing scores for any missing score.\n\n- This is fast and easy to understand\n- It works OK (but there are certainly better options that we will consider later in the course)\n  - see other options in [Step Functions - Imputation](https://recipes.tidymodels.org/reference/index.html) section on `tidymodels` website\n- There is only one missing value so it likely doesn't matter much anyway\n\n-----\n\nLet's add this to our recipe. All of the defaults are appropriate but you should see `?step_impute_median()` to review them\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area + lot_area + year_built + garage_cars, # <1>\n         data = data_trn) |> \n  step_impute_median(garage_cars)\n```\n:::\n\n1. Notice we now list four predictors for our recipe using `+` between them\n\n-----\n\nNow we need to \n\n- First prep recipe\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)  # <1>\n```\n:::\n\n1. I am going to stop using `training =` at this point.  Remember, we prep recipes with training data.\n\n-----\n\n- Next, bake the training data with prepped recipe to get training features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn <- rec_prep |> \n  bake(data_trn) # <1>\n```\n:::\n\n1. I am going to stop using `new_data = ` but remember, we can bake any dataset to make features for that dataset.\n\n-----\n\n- And take a quick look at the features\n  - Sample size is correct\n  - 4 features and the outcome variable\n  - All features are numeric\n  - No missing data for `garage_qual`\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |5        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|-----:|--------:|\n|gr_liv_area   |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642|  1.43|     5.19|\n|lot_area      |         0|             1|  10144.16|  8177.55|  1476|   7500|   9375|  11362| 164660| 11.20|   182.91|\n|year_built    |         0|             1|   1971.35|    29.65|  1880|   1953|   1972|   2000|   2010| -0.54|    -0.62|\n|garage_cars   |         0|             1|      1.78|     0.76|     0|      1|      2|      2|      4| -0.26|     0.10|\n|sale_price    |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000|  1.64|     4.60|\n\n\n:::\n:::\n\n\n-----\n\n- And finally, bake the validation data with the same prepped recipe to get validation features\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val <- rec_prep |> \n  bake(data_val) # <1>\n```\n:::\n\n1. Notice that here we are now baking `data_val`\n\n-----\n\n- And take a quick look \n  - Correct sample size (N = 490)\n  - 4 features and outcome\n  - All numeric\n  - No missing data\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_val |\n|Number of rows           |490      |\n|Number of columns        |5        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|    p0|      p25|      p50|       p75|   p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|-----:|--------:|--------:|---------:|------:|-----:|--------:|\n|gr_liv_area   |         0|             1|   1493.00|   483.78|   480|   1143.5|   1436.0|   1729.50|   3608|  0.92|     1.16|\n|lot_area      |         0|             1|  10462.08| 10422.55|  1680|   7500.0|   9563.5|  11780.75| 215245| 15.64|   301.66|\n|year_built    |         0|             1|   1971.08|    30.96|  1875|   1954.0|   1975.0|   2000.00|   2010| -0.66|    -0.41|\n|garage_cars   |         0|             1|      1.74|     0.76|     0|      1.0|      2.0|      2.00|      4| -0.24|     0.22|\n|sale_price    |         0|             1| 178512.82| 75493.59| 35311| 129125.0| 160000.0| 213000.00| 556581|  1.42|     2.97|\n\n\n:::\n:::\n\n\n----- \n\nNow let's combine our algorithm and training features to fit this model configuration with 4 features\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_4 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~ ., data = feat_trn) # <1>\n```\n:::\n\n1. the `.` is a bit more useful now\n\n-----\n\nThis yields these parameter estimates (which as we know from 610/710 were selected to minimize SSE in the training set):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_4 |> tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  term            estimate std.error statistic   p.value\n  <chr>              <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept) -1665041.    89370.       -18.6  1.14e- 69\n2 gr_liv_area       76.8       2.62      29.3  3.56e-149\n3 lot_area           0.514     0.146      3.51 4.60e-  4\n4 year_built       854.       46.2       18.5  7.66e- 69\n5 garage_cars    22901.     1964.        11.7  4.09e- 30\n```\n\n\n:::\n:::\n\n\n-----\n\nHere is our parametric model\n\n\n\n\n- $\\hat{sale\\_price} = -1.6650409\\times 10^{6} + 76.8 * gr\\_liv\\_area + 0.5 * lot\\_area + 854.3 * year\\_built + 2.29008\\times 10^{4} * garage\\_cars$\n\nCompared with our previous simple regression model:\n\n\n\n\n- $\\hat{sale\\_price} = 1.6561\\times 10^{4} + 108.9 * gr\\_liv\\_area$\n\n-----\n\nOf course, these four features are correlated both with `sale_price` but also with each other\n\nLet's look at correlations in the training set.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> \n  cor() |> \n  corrplot::corrplot.mixed()\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-simple-27-1.png){width=672}\n:::\n:::\n\n\n-----\n\n::: {.callout-important collapse=\"false\"}\n### Question: What are the implications of the correlations among many of these predictors?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nThe multiple regression model coefficients represent unique effects, controlling for \nall other variables in the model.  You can see how the unique effect of `gr_liv_area` \nis smaller than its overall effect from the simple regression.   This also means \nthat the overall predictive strength of the model will not be a sum of the effects \nof each predictor considered in isolation - it will likely be less.  Also, if the \ncorrelations are high, problems with multicollinearity will emerge.  This will yield \nlarge standard errors which means that the models will start to have more variance when \nfit in different training datasets!  We will soon learn about other regularized \nversions of the GLM that do not have these issues with correlated predictors.\n```\n:::\n\n:::\n\n-----\n\nHow well does this more complex model perform in validation?   Let's compare the previous and current visualizations of $sale\\_price$ vs. $\\hat{sale\\_price}$\n\n- Looks like the errors are smaller (closer to the diagonal line that would represent prefect prediction)\n- Clear signs of non-linearity are now present as well.  Time for more Modeling EDA!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_1 <- plot_truth(truth = feat_val$sale_price, \n                     estimate = predict(fit_lm_1, feat_val)$.pred)\n\nplot_4 <- plot_truth(truth = feat_val$sale_price, \n                     estimate = predict(fit_lm_4, feat_val)$.pred)\n\ncowplot::plot_grid(plot_1, plot_4, \n          labels = list(\"1 feature\", \"4 features\"), hjust = -1.5)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-simple-28-1.png){width=672}\n:::\n:::\n\n\n**Coding sidebar**: Notice the use of `plot_grid()` from the `cowplot` package to make side by side plots.   This also required returning the individual plots as objects (just assign to a object name, e.g., plot_1)\n\n-----\n\nLet's compare model performance for the two models using RMSE in the validation set\n\n- The one feature simple linear model\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val$sale_price, \n         predict(fit_lm_1, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 51375.08\n```\n\n\n:::\n:::\n\n\n- The four feature linear model.  A clear improvement!\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val$sale_price, \n         predict(fit_lm_4, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39903.25\n```\n\n\n:::\n:::\n\n\n-----\n\n- Let's bind the new performance metric to our results table\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  model                  rmse_val\n  <chr>                     <dbl>\n1 simple linear model      51375.\n2 4 feature linear model   39903.\n```\n\n\n:::\n:::\n\n\n----- \n\nGiven the non-linearity suggested by the truth vs. estimate plots, we might wonder if we could improve the fit if we transformed our features to be closer to normal\n\n- There are a number of recipe functions that do transformations (see [Step Functions - Individual Transformations](https://recipes.tidymodels.org/reference/index.html))\n\n- We will apply `step_YeoJohnson()`, which is similar to a Box-Cox transformation but can be more broadly applied because the scores don't need to be strictly positive\n\n-----\n\nLet's do it all again, now with transformed features!\n\n- Define the feature engineering recipe\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area + lot_area + year_built + garage_cars, \n         data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_YeoJohnson(lot_area, gr_liv_area, year_built, garage_cars)\n```\n:::\n\n\n-----\n\n- Prep the recipe with training set\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n```\n:::\n\n\n- Use prepped recipe to bake the training set into features\n\n- Notice the features are now less skewed (but `sale_price` is still skewed)\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |5        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|       p0|       p25|       p50|       p75|      p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|--------:|---------:|---------:|---------:|---------:|-----:|--------:|\n|gr_liv_area   |         0|             1|      5.22|     0.16|     4.60|      5.11|      5.23|      5.33|      5.86|  0.00|     0.12|\n|lot_area      |         0|             1|     14.10|     1.14|    10.32|     13.69|     14.20|     14.64|     21.65|  0.08|     5.46|\n|year_built    |         0|             1|   1971.35|    29.65|  1880.00|   1953.00|   1972.00|   2000.00|   2010.00| -0.54|    -0.62|\n|garage_cars   |         0|             1|      2.12|     0.98|     0.00|      1.11|      2.37|      2.37|      5.23| -0.03|     0.04|\n|sale_price    |         0|             1| 180696.15| 78836.41| 12789.00| 129500.00| 160000.00| 213500.00| 745000.00|  1.64|     4.60|\n\n\n:::\n:::\n\n\n-----\n\n- Use same prepped recipe to bake the validation set into features\n\n- Again, features are less skewed\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val <- rec_prep |> \n  bake(data_val)\n\nfeat_val |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_val |\n|Number of rows           |490      |\n|Number of columns        |5        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|       p0|       p25|       p50|       p75|      p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|--------:|---------:|---------:|---------:|---------:|-----:|--------:|\n|gr_liv_area   |         0|             1|      5.22|     0.16|     4.65|      5.11|      5.23|      5.32|      5.66| -0.17|     0.19|\n|lot_area      |         0|             1|     14.14|     1.17|    10.57|     13.69|     14.24|     14.72|     22.44|  0.11|     6.12|\n|year_built    |         0|             1|   1971.08|    30.96|  1875.00|   1954.00|   1975.00|   2000.00|   2010.00| -0.66|    -0.41|\n|garage_cars   |         0|             1|      2.06|     0.96|     0.00|      1.11|      2.37|      2.37|      5.23|  0.01|     0.24|\n|sale_price    |         0|             1| 178512.82| 75493.59| 35311.00| 129125.00| 160000.00| 213000.00| 556581.00|  1.42|     2.97|\n\n\n:::\n:::\n\n\n-----\n\n- Fit model\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_4yj <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n- View truth vs. estimate plot\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price,\n           estimate = predict(fit_lm_4yj, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n-----\n\n- and look at the error\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  model                          rmse_val\n  <chr>                             <dbl>\n1 simple linear model              51375.\n2 4 feature linear model           39903.\n3 4 feature linear model with YJ   41660.\n```\n\n\n:::\n:::\n\n\n- That didn't help at all.   Error still high and still non-linearity in plot.\n\n-----\n\nWe may need to consider \n\n- a transformation of `sale_price` (We will leave that to you for the application assignment if you are daring!)\n- or a different algorithm that can handle non-linear relationships better\n\n-----\n\n## Extension to Categorical Predictors\n\nMany important predictors in our models may be categorical (nominal and some ordinal predictors)\n\n- Some statistical algorithms (e.g., random forest) can accept even nominal predictors as features without any further feature engineering\n- But many cannot.  Linear models cannot.\n- The type of feature engineering may differ for nominal vs. ordinal categorical predictors\n- For **nominal categorical predictors**:\n  - We need to learn a common approach to transform them to numeric features - dummy coding.  We will learn the concept in general AND how to accomplish within a feature engineering recipe.\n- For **ordinal predictors**:\n  - We can treat them like numeric predictors\n  - We can treat them like nominal categorical predictors\n- See article on [Categorical Predictors](https://recipes.tidymodels.org/articles/Dummies.html) on the `tidymodels` website for more details\n\n-----\n\n### Dummy Coding\n\nFor many algorithms, we will need to use feature engineering to convert a categorical predictor to numeric features.  One common technique is to use dummy coding.  When dummy coding a predictor, we transform the original categorical predictor with m levels into m-1 dummy coded features.\n\nTo better understand how and why we do this, lets consider a version of `ms_zoning` in the Ames dataset.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> \n  pull(ms_zoning) |> \n  table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    agri   commer    float    indus res_high  res_low  res_med \n       2       13       66        1        9     1157      217 \n```\n\n\n:::\n:::\n\n\nWe will recode `ms_zoning` to have only 3 levels to make our example simple (though dummy codes can be used for predictors with any number of levels)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dummy <- data_trn |> \n  select(sale_price, ms_zoning)  |> # <1>\n  mutate(ms_zoning3 = fct_collapse(ms_zoning, # <2>\n                                 \"residential\" = c(\"res_high\", \"res_med\",\n                                                   \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\")) |> # <3>\n  select(-ms_zoning) # <4>\n```\n:::\n\n1. Make a df (dataframe) with only `sale_price` and `ms_zoning`\n2. `fct_collapse()` from the `forcats` package is our preferred way to collapse levels of a factor.  See `fct_recode()` for more generic recoding of levels.\n3. We could have left this line out and float would have stayed as a level named float\n4. Remove original `ms_zoning` predictor\n\n-----\n\nTake a look at the new predictor\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dummy |> \n  pull(ms_zoning3) |> \n  table() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n commercial    floating residential \n         16          66        1383 \n```\n\n\n:::\n:::\n\n\n-----\n\n::: {.callout-important collapse=\"false\"}\n### Question: Why can't we simply recode each level with a different consecutive value (e.g., commercial = 1, floating =2 , residential = 3)?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nThere is no meaningful way to order the numbers that we assign to the levels of \nthis unordered categorical predictor.  The shape and strength of the relationship\nbetween it and sale_price will completely change based on arbitrary ordering of \nthe levels.\n```\n:::\n\n:::\n\n-----\n\nImagine fitting a straight line to predict `sale_price` from `ms_zoning3` using these three different ways to arbitrarily assign numbers to levels.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dummy |> \n  mutate(ms_zoning3 = case_when(ms_zoning3 == \"residential\" ~ 1,\n                                ms_zoning3 == \"commercial\" ~ 2,\n                                ms_zoning3 == \"floating\" ~ 3)) |> \n  ggplot(aes(x = ms_zoning3, y = sale_price)) +\n    geom_bar(stat=\"summary\", fun = \"mean\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dummy |> \n  mutate(ms_zoning3 = case_when(ms_zoning3 == \"residential\" ~ 2,\n                                ms_zoning3 == \"commercial\" ~ 1,\n                                ms_zoning3 == \"floating\" ~ 3)) |> \n  ggplot(aes(x = ms_zoning3, y = sale_price)) +\n    geom_bar(stat=\"summary\", fun = \"mean\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dummy |> \n  mutate(ms_zoning3 = case_when(ms_zoning3 == \"residential\" ~ 3,\n                                ms_zoning3 == \"commercial\" ~ 1,\n                                ms_zoning3 == \"floating\" ~ 2)) |> \n  ggplot(aes(x = ms_zoning3, y = sale_price)) +\n    geom_bar(stat=\"summary\", fun = \"mean\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n-----\n\nDummy coding resolves this issue.\n\n- When using dummy codes, we transform (i.e., feature engineer) our original m-level categorical predictor to m-1 dummy features.\n- Each of these m-1 features represents a contrast between a specific level of the categorical variable and a **reference level** \n- The full set of m-1 features represents the overall effect of the categorical predictor variable.\n- We assign values of 0 or 1 to each observation on each feature in a meaningful pattern (see below)\n\n-----\n\nFor example, with our three-level predictor: `ms_zoning3`\n\n- We need 2 dummmy features (d1, d2) to represent this 3-level categorical predictor\n- Dummy feature 1 is coded 1 for residential and 0 for all other levels\n- Dummy feature 2 is coded 1 for floating and 0 for all other levels\n\n\nHere is this coding scheme displayed in a table\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  ms_zoning3     d1    d2\n  <chr>       <dbl> <dbl>\n1 commercial      0     0\n2 residential     1     0\n3 floating        0     1\n```\n\n\n:::\n:::\n\n\n----- \n\nWith this coding:\n\n- Commercial properties are coded 0 for both d1 and d2.  \n- This means that commercial properties will become the reference level against which both residential and floating village are compared.\n- Because we are focused on prediction, the choice of reference level is mostly arbitrary.  For explanatory goals, you might consider which level is best suited to be the reference.\n- There is much deeper coverage of dummy and other contrast coding in 610/710\n\n-----\n\nWe can add these two features manually to the data frame and view a handful of observations to make this coding scheme more concrete  \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  sale_price ms_zoning3     d1    d2\n       <dbl> <fct>       <dbl> <dbl>\n1     105000 residential     1     0\n2     126000 residential     1     0\n3      13100 commercial      0     0\n4     115000 residential     1     0\n5     149500 floating        0     1\n6      40000 commercial      0     0\n7     120000 residential     1     0\n8     151000 floating        0     1\n```\n\n\n:::\n:::\n\n\n----- \n\nIf we now fit a model where we predict `sale_price` from these two dummy coded features, each feature would represent the contrast of the mean `sale_price` for the level coded 1 vs. the mean `sale_price` for the level that is coded 0 for all features (i.e., commercial)\n\n- d1 is the contrast of mean `sale_price` for residential vs. commercial\n- d2 is the contrast of mean `sale_price` for floating vs. commercial\n- The combined effect of these two features represents the overall effect of `ms_zoning3` on `sale_price`\n\n-----\n\nLets do this quickly in base R using `lm()` as you have done previously in 610.\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- lm(sale_price ~ d1 + d2, data = data_dummy) \n\nm |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ d1 + d2, data = data_dummy)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-166952  -50241  -20241   31254  565259 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    81523      19409   4.200 2.83e-05 ***\nd1             98219      19521   5.031 5.47e-07 ***\nd2            143223      21634   6.620 5.03e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 77640 on 1462 degrees of freedom\nMultiple R-squared:  0.03151,\tAdjusted R-squared:  0.03018 \nF-statistic: 23.78 on 2 and 1462 DF,  p-value: 6.858e-11\n```\n\n\n:::\n:::\n\n\n- The mean sale price of residential properties is 9.8219\\times 10^{4} dollars higher than commercial properties.\n\n- The mean sale price of floating villages is 1.43223\\times 10^{5} dollars higher than commercial properties. \n\n-----\n\nTo understand this conceptually, it is easiest to visualize the linear model that would predict `sale_price` with these two dichotomous features.\n\n- There are only three columns of `sale_price` because the only possible values for `d1` and `d2` (which are both dichotomous) are \n  - 0,0 (commercial)\n  - 1,0 (residential)\n  - 0,1 (floating village)\n- This regression with two features yields a prediction plane (displayed)\n- The left/right tilt of the plane will be the parameter estimate for d1 and it is the contrast of residential vs. commercial\n- The front/back tilt of the plane will be the parameter estimate for d2 and it is the contrast of floating village vs. commercial\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n-----\n\n**Statistical sidebar**:\n\n- Any full rank (# levels - 1) set of features regardless of coding system predicts exactly the same (e.g., dummy, helmert, contrast coding)\n- Preference among coding systems is simply to get single df contrasts of theoretical importance (i.e., for explanation rather than prediction)\n- Final (m^th^) dummy feature is not included b/c its is completely redundant (perfectly multicollinear) with other dummy features. This would also prevent a linear model from fitting ('**dummy variable trap**').\n- However, some statistical algorithms do not have problems with perfect multicollinearity (e.g., LASSO, ridge regression).  \n  - For these algorithms, you will sometimes see modified version of dummy coding called [one-hot coding](https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/).  \n  - This approach uses one additional dummy coded feature for the final category.  \n  - We won't spend time on this but you should be familiar with the term b/c it is often confused with dummy coding.\n  \n---\n\n**Coding Sidebar**\n\nWhen creating dummy coded features from factors that have levels with infrequent observations, you may occasionally end up with novel levels in your validation or test sets that were not present in your training set.  \n\n- This will cause you issues.  \n- These issues are mostly resolved if you make sure to explicitly list all possible levels for a factor when classing that factor in the training data, even if the level doesn't exist in the training data.   \n- We provide more detail on this issue in an [appendix](https://jjcurtin.github.io/book_iaml/app_dummy_coding.html).\n\n-----\n\n###  Nominal Predictors\n\nNow that we understand how to use dummy coding to feature engineer nominal predictors, let's consider some potentially important ones that are available to us.\n\nWe can discuss if any look promising.\n\n-----\n\nLets return first to `ms_zoning`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> \n  plot_categorical(\"ms_zoning\", \"sale_price\") |> \n  cowplot::plot_grid(plotlist = _, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Groups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-categorical-2-1.png){width=672 height=3in}\n:::\n:::\n\n\t\nWe might: \n\n- Represent it with 6 dummy features (because there are 7 raw levels) but many of the categories are very low n - won't account for much variance?\n- Combine all the commercial categories (agri, commer, indus), which would take care of most of the low n groups.  They also all tend to have the lower prices.\n-  Combine all the residential to get a better feature to variance accounted ratio.  They all tend to have similar prices on average and res_high is also pretty low n. \n\nData dictionary entry: Identifies the general zoning classification of the sale.\n\n- agri:\tAgriculture\n- commer:\tCommercial\n- float:\tFloating Village Residential\n- indus:\tIndustrial\n- res_high:\tResidential High Density\n- res_med:\tResidential Medium Density\n- res_low:\tResidential Low Density\n\n-----\n\n`lot_config`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> \n  plot_categorical(\"lot_config\", \"sale_price\") |> \n  cowplot::plot_grid(plotlist = _, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-categorical-3-1.png){width=672 height=3in}\n:::\n:::\n\n\n\nWe see that: \n\n- Most are inside lots, some of the lot categories are low n\n- Median `sale_price` is not very different between configurations\n- Not very promising but could help some (particularly given the large sample size)\n\nData dictionary entry: Lot configuration\n\n- inside:\tInside lot\n- corner:\tCorner lot\n- culdsac:\tCul-de-sac\n- fr2:\tFrontage on 2 sides of property\n- fr3:\tFrontage on 3 sides of property\n\n-----\n\n`bldg_type`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> \n  plot_categorical(\"bldg_type\", \"sale_price\") |> \n  cowplot::plot_grid(plotlist = _, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-categorical-4-1.png){width=672 height=3in}\n:::\n:::\n\n\n\nWe see that:\n\n- Most of the houses are in one category - one_fam\n- There is not much difference in median `sale_price` among categories\n- Not very promising\n\n\nData dictionary entry: Type of dwelling\n\t\t\n- one_fam:\tSingle-family Detached\t\n- two_fam:\tTwo-family Conversion; originally built as one-family dwelling\n- duplex: Duplex\n- town_end:\tTownhouse End Unit\n- town_inside:\tTownhouse Inside Unit\n\n-----\n\nLet's do some feature engineering with `ms_zoning`.  We can now do this formally in a recipe so that it can be used in our modeling workflow.\n\n- First, if you noticed earlier, there are some levels for `ms_zoning` that are pretty infrequent.  Lets make sure both `data_trn` and `data_val` have all levels set for this factor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> pull(ms_zoning) |> levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"agri\"     \"commer\"   \"float\"    \"indus\"    \"res_high\" \"res_low\"  \"res_med\" \n```\n\n\n:::\n\n```{.r .cell-code}\ndata_val |> pull(ms_zoning) |> levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"commer\"   \"float\"    \"indus\"    \"res_high\" \"res_low\"  \"res_med\" \n```\n\n\n:::\n:::\n\n\n- As expected, we are missing a level (`agri`) in `data_val`.  Lets fix that here \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_val <- data_val |> \n  mutate(ms_zoning = factor(ms_zoning, \n                            levels = c(\"agri\", \"commer\", \"float\", \"indus\", \n                                       \"res_high\", \"res_low\", \"res_med\")))\n```\n:::\n\n\n[Note:  Ideally, you would go back to cleaning EDA and add this level to the full dataset and then re-split into training, validation and test.  This is a sloppy shortcut!]\n\n-----\n\nWith that fixed, let's proceed:\n\n- We will collapse categories down to three levels (commercial, residential, floating village) as before but now using `step_mutate()` combined with `fct_collapse()` to do this inside of our recipe.  \n- We will convert to dummy features using `step_dummy()`.  The first level of the factor will be set to the reference level when we call `step_dummy()`. \n- `step_dummy()` is a poor choice for function name.  It actually uses whatever contrast coding we have set up in R.  However, the default is are dummy coded contrasts (R calls this treatment contrasts). See `?contrasts` and `options(\"contrasts\")` for more info.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area + lot_area + year_built + garage_cars + ms_zoning, \n         data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(ms_zoning = fct_collapse(ms_zoning,\n                                 \"residential\" = c(\"res_high\", \"res_med\", \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\")) |>\n  step_dummy(ms_zoning)\n```\n:::\n\n\n-----\n\n**Coding Sidebar**\n\nYou should also read more about some other `step_()` functions that you might use for categorical predictors:\n- `step_other()` to combine all low frequency categories into a single \"other\" category.\n- `step_unknown()` to assign missing values their own category\n- You can use selector functions.  For example, you could make dummy variables out of all of your factors in one step using `step_dummy(all_nominal_predictors())`.  \n\nSee the [Step Functions - Dummy Variables and Encoding section](https://recipes.tidymodels.org/reference/index.html) on the `tidymodels` website for additional useful functions.\n\nWe have also described these in the section on factor steps in Appendix 1\n\n-----\n\nLet's see if the addition of `ms_zoning` helped\n\n- Notice the addition of the dummy coded features to the feature matrix\n- Notice the removal of the factor `ms_zoning`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- skim\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |7        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |7        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable         | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100|  skew| kurtosis|\n|:---------------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|-----:|--------:|\n|gr_liv_area           |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642|  1.43|     5.19|\n|lot_area              |         0|             1|  10144.16|  8177.55|  1476|   7500|   9375|  11362| 164660| 11.20|   182.91|\n|year_built            |         0|             1|   1971.35|    29.65|  1880|   1953|   1972|   2000|   2010| -0.54|    -0.62|\n|garage_cars           |         0|             1|      1.78|     0.76|     0|      1|      2|      2|      4| -0.26|     0.10|\n|sale_price            |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000|  1.64|     4.60|\n|ms_zoning_floating    |         0|             1|      0.05|     0.21|     0|      0|      0|      0|      1|  4.38|    17.22|\n|ms_zoning_residential |         0|             1|      0.94|     0.23|     0|      1|      1|      1|      1| -3.86|    12.90|\n\n\n:::\n\n```{.r .cell-code}\nfeat_val |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_val |\n|Number of rows           |490      |\n|Number of columns        |7        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |7        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable         | n_missing| complete_rate|      mean|       sd|    p0|      p25|      p50|       p75|   p100|  skew| kurtosis|\n|:---------------------|---------:|-------------:|---------:|--------:|-----:|--------:|--------:|---------:|------:|-----:|--------:|\n|gr_liv_area           |         0|             1|   1493.00|   483.78|   480|   1143.5|   1436.0|   1729.50|   3608|  0.92|     1.16|\n|lot_area              |         0|             1|  10462.08| 10422.55|  1680|   7500.0|   9563.5|  11780.75| 215245| 15.64|   301.66|\n|year_built            |         0|             1|   1971.08|    30.96|  1875|   1954.0|   1975.0|   2000.00|   2010| -0.66|    -0.41|\n|garage_cars           |         0|             1|      1.74|     0.76|     0|      1.0|      2.0|      2.00|      4| -0.24|     0.22|\n|sale_price            |         0|             1| 178512.82| 75493.59| 35311| 129125.0| 160000.0| 213000.00| 556581|  1.42|     2.97|\n|ms_zoning_floating    |         0|             1|      0.05|     0.22|     0|      0.0|      0.0|      0.00|      1|  4.07|    14.58|\n|ms_zoning_residential |         0|             1|      0.93|     0.25|     0|      1.0|      1.0|      1.00|      1| -3.51|    10.33|\n\n\n:::\n:::\n\n\n-----\n\n- Now lets fit a model with these features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_6 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n- plot it\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n           estimate = predict(fit_lm_6, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-37-1.png){width=672 height=3in}\n:::\n:::\n\n\n-----\n\n- And evaluate it\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  model                              rmse_val\n  <chr>                                 <dbl>\n1 simple linear model                  51375.\n2 4 feature linear model               39903.\n3 4 feature linear model with YJ       41660.\n4 6 feature linear model w/ms_zoning   39846.\n```\n\n\n:::\n:::\n\n\n- Removing Yeo Johnson transformation but adding dummy coded `ms_zoning` may have helped a little\n\n-----\n\n::: {.callout-important collapse=\"false\"}\n### Question: Will the addition of new predictors/features to a model always reduce RMSE in train?  in validation?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nAs you know, the estimation procedure in linear models is OLS.  Parameter estimates\nare derived to minimize the SSE in the data set in which they are derived.  For this\nreason, adding a predictor will never increase RMSE in the training set and it will\nusually lower it even when it is not part of the DGP.   However, this is not true in\nvalidation.  A predictor will only meaningfully lower RMSE in validation if it is\npart of the DGP.  Also, a bad predictor could even increase RMSE in validation due to\noverfitting.\n```\n:::\n\n:::\n\n-----\n\n### Ordinal Predictors\n\nWe have two paths to pursue for ordinal predictors\n\n- We can treat them like nominal predictors (e.g., dummy code)\n- We can treat them like numeric predictors (either raw or with an added transformation if needed)\n\n-----\n\nLet's consider `overall_qual`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> \n  plot_categorical(\"overall_qual\", \"sale_price\") |> \n  cowplot::plot_grid(plotlist = _, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-categorical-7-1.png){width=672 height=3in}\n:::\n:::\n\n\nObservations:\n\n- Low frequency for low and to some degree high quality response options.  If dummy coding, may want to collapse some (1-2)\n- There is a monotonic relationship (mostly linear) with `sale_price`.   Treat as numeric?\n- Not skewed so doesn't likely need to be transformed if treated as numeric\n- Numeric will take one feature vs. many (9?) features for dummy codes.  \n- Dummy codes are more flexible but we may not need this flexibility (and unnecessary flexibility increases overfitting)\n\n-----\n\nLet's add `overall_qual` to our model as numeric\n\nRemember that this predictor was ordinal so we paid special attention to the order of the levels when we classed this factor.  Lets confirm they are in order\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_trn |> pull(overall_qual) |> levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n```\n\n\n:::\n:::\n\n\n-----\n\nTo convert `overall_qual` to numeric (with levels in the specified order), we can use another simple mutate inside our recipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~  ~ gr_liv_area + lot_area + year_built + garage_cars + \n           ms_zoning + overall_qual, data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(ms_zoning = fct_collapse(ms_zoning,\n                                 \"residential\" = c(\"res_high\", \"res_med\", \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\"),\n              overall_qual = as.numeric(overall_qual)) |>\n  step_dummy(ms_zoning)\n```\n:::\n\n\n**Coding Sidebar**\n\nThere is a step function called `step_ordinalscore()` but it requires that the factor is classed as an ordered factor.  It is also more complicated than needed in our opinion.  Just use `as.numeric()`\n\n-----\n\nLet's evaluate this model\n\n- Making features\n- Skipping the skim to save space (we promised we checked it previously!)\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- Fitting model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_7 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n- Plotting results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n                                 estimate = predict(fit_lm_7, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n-----\n\n- Quantifying held out error\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  model                              rmse_val\n  <chr>                                 <dbl>\n1 simple linear model                  51375.\n2 4 feature linear model               39903.\n3 4 feature linear model with YJ       41660.\n4 6 feature linear model w/ms_zoning   39846.\n5 7 feature linear model               34080.\n```\n\n\n:::\n:::\n\n\n- That helped!\n\n-----\n\n## Extensions to Interactive Models and Non-linear Models\n\n\n### Interactions \n\nThere may be interactive effects among our predictors\n\n- Some statistical algorithms (e.g., KNN) can naturally accommodate interactive effects without any feature engineering\n- Linear models cannot\n- Nothing to fear, tidymodels makes it easy to feature engineer interactions\n- [BUT - as we will learn, we generally think that if you expect lots of interactions, the linear model may not be the best model to use]\n\n-----\n\nFor example, it may be that the relationship between `year_built` and `sale_price` depends on `overall_qual`.\n\n- Old houses are expensive if they are in good condition \n- but old houses are very cheap if they are in poor condition\n\n-----\n\nIn the `tidymodels` framework\n\n- Coding interactions is done by feature engineering, not by formula (Note that formula does not change below in recipe)\n- This seems appropriate to us as we are making new features to represent interactions\n- We still use an R formula like interface to specify the interaction term features that will be created\n- see [more details](https://recipes.tidymodels.org/reference/step_interact.html) on the `tidymodels` website\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~  ~ gr_liv_area + lot_area + year_built + garage_cars + \n           ms_zoning + overall_qual, data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(ms_zoning = fct_collapse(ms_zoning,\n                                 \"residential\" = c(\"res_high\", \"res_med\", \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\"),\n              overall_qual = as.numeric(overall_qual)) |>\n  step_dummy(ms_zoning) |> \n  step_interact(~ overall_qual:year_built)\n```\n:::\n\n\n-----\n\nLet's prep, bake, fit, and evaluate! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- Note the new interaction term (we just skim `feat_trn` here)\n- Named using \"_x_\" to specify the interaction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |9        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |9        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable             | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100|  skew| kurtosis|\n|:-------------------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|-----:|--------:|\n|gr_liv_area               |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642|  1.43|     5.19|\n|lot_area                  |         0|             1|  10144.16|  8177.55|  1476|   7500|   9375|  11362| 164660| 11.20|   182.91|\n|year_built                |         0|             1|   1971.35|    29.65|  1880|   1953|   1972|   2000|   2010| -0.54|    -0.62|\n|garage_cars               |         0|             1|      1.78|     0.76|     0|      1|      2|      2|      4| -0.26|     0.10|\n|overall_qual              |         0|             1|      6.08|     1.41|     1|      5|      6|      7|     10|  0.20|    -0.03|\n|sale_price                |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000|  1.64|     4.60|\n|ms_zoning_floating        |         0|             1|      0.05|     0.21|     0|      0|      0|      0|      1|  4.38|    17.22|\n|ms_zoning_residential     |         0|             1|      0.94|     0.23|     0|      1|      1|      1|      1| -3.86|    12.90|\n|overall_qual_x_year_built |         0|             1|  12015.69|  2907.93|  1951|   9800|  11808|  14021|  20090|  0.24|    -0.11|\n\n\n:::\n:::\n\n\n-----\n\n- fit model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_8 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~., \n      data = feat_trn)\n```\n:::\n\n\n-----\n\n- plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n           estimate = predict(fit_lm_8, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n-----\n\n- calculate held out error\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  model                                rmse_val\n  <chr>                                   <dbl>\n1 simple linear model                    51375.\n2 4 feature linear model                 39903.\n3 4 feature linear model with YJ         41660.\n4 6 feature linear model w/ms_zoning     39846.\n5 7 feature linear model                 34080.\n6 8 feature linear model w/interaction   32720.\n```\n\n\n:::\n:::\n\n\n\n- That helped!\n\n-----\n\nYou can also feature engineer interactions with nominal (and ordinal predictors treated as nominal) predictors\n\n- The nominal predictors should first be converted to dummy code features\n- You will indicate the interactions using the variable names that will be assigned to these dummy code features\n- Use `starts_with()` or `matches()` to make it easy if there are many features associated with a categorical predictor\n- Can use \"~ .^2\" to include all two way interactions (be careful if you have dummy coded features!)\n\n-----\n\nLet's code an interaction between `ms_zoning` & `year_built`.  \n\n- Old homes are cool\n- Old commercial spaces are never cool\n- Maybe this is why the main effect of `ms_zoning` wasn't useful\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~  ~ gr_liv_area + lot_area + year_built + garage_cars + \n           ms_zoning + overall_qual, data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(ms_zoning = fct_collapse(ms_zoning,\n                                 \"residential\" = c(\"res_high\", \"res_med\", \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\"),\n              overall_qual = as.numeric(overall_qual)) |>\n  step_dummy(ms_zoning) |> \n  step_interact(~ overall_qual:year_built) |> \n  step_interact(~ starts_with(\"ms_zoning_\"):year_built)  \n```\n:::\n\n\n-----\n\n- prep, bake\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- Yup, we have two new interaction features as expected\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |11       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |11       |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable                      | n_missing| complete_rate|      mean|       sd|    p0|    p25|    p50|    p75|   p100|  skew| kurtosis|\n|:----------------------------------|---------:|-------------:|---------:|--------:|-----:|------:|------:|------:|------:|-----:|--------:|\n|gr_liv_area                        |         0|             1|   1506.84|   511.44|   438|   1128|   1450|   1759|   5642|  1.43|     5.19|\n|lot_area                           |         0|             1|  10144.16|  8177.55|  1476|   7500|   9375|  11362| 164660| 11.20|   182.91|\n|year_built                         |         0|             1|   1971.35|    29.65|  1880|   1953|   1972|   2000|   2010| -0.54|    -0.62|\n|garage_cars                        |         0|             1|      1.78|     0.76|     0|      1|      2|      2|      4| -0.26|     0.10|\n|overall_qual                       |         0|             1|      6.08|     1.41|     1|      5|      6|      7|     10|  0.20|    -0.03|\n|sale_price                         |         0|             1| 180696.15| 78836.41| 12789| 129500| 160000| 213500| 745000|  1.64|     4.60|\n|ms_zoning_floating                 |         0|             1|      0.05|     0.21|     0|      0|      0|      0|      1|  4.38|    17.22|\n|ms_zoning_residential              |         0|             1|      0.94|     0.23|     0|      1|      1|      1|      1| -3.86|    12.90|\n|overall_qual_x_year_built          |         0|             1|  12015.69|  2907.93|  1951|   9800|  11808|  14021|  20090|  0.24|    -0.11|\n|ms_zoning_floating_x_year_built    |         0|             1|     90.29|   415.84|     0|      0|      0|      0|   2009|  4.38|    17.22|\n|ms_zoning_residential_x_year_built |         0|             1|   1860.03|   453.95|     0|   1948|   1968|   1997|   2010| -3.83|    12.78|\n\n\n:::\n:::\n\n\n-----\n\n- Fit model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm_10 <- \n  linear_reg() |> \n  set_engine(\"lm\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n- Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n           estimate = predict(fit_lm_10, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n-----\n\n- Quantify held out error\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_val <- error_val |> \n  bind_rows(tibble(model = \"10 feature linear model w/interactions\", \n                   rmse_val = rmse_vec(feat_val$sale_price,\n                                       predict(fit_lm_10,\n                                               feat_val)$.pred)))\n\nerror_val\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  model                                  rmse_val\n  <chr>                                     <dbl>\n1 simple linear model                      51375.\n2 4 feature linear model                   39903.\n3 4 feature linear model with YJ           41660.\n4 6 feature linear model w/ms_zoning       39846.\n5 7 feature linear model                   34080.\n6 8 feature linear model w/interaction     32720.\n7 10 feature linear model w/interactions   32708.\n```\n\n\n:::\n:::\n\n\n- Not really any better \n- Shouldn't just include all interactions without reason\n  - Either you have done EDA to support them or\n  - You have substantive interest in them (explanatory question)\n  - If you want all interactions, use a statistical algorithm that supports those relationships without feature engineering (e.g., KNN, random forest and other decision trees)\n  \n-----\n\n### Non-linear Models\n \nWe may also want to model non-linear effects of our predictors\n\n- Some non-parametric models can accommodate non-linear effects without feature engineering (e.g., KNN, Random Forest).\n- Non-linear effects can be accommodated in a linear model with feature engineering\n  - Transformations of Y or X.  See [Step Functions - Individual Transformations](https://recipes.tidymodels.org/reference/index.html) on `tidymodels` website\n  - Ordinal predictors can be coded with dummy variables\n  - Numeric predictors can be split at threshold\n  - Polynomial contrasts for numeric or ordinal predictors (see `step_poly()`)  \n  \n\n- We will continue to explore these options throughout the course\n\n-----\n\n## KNN Regression\n\nK Nearest Neighbor\n\n- Is a non-parametric regression and classification statistical algorithm\n  - It does not yield specific parameter estimates for features/predictors (or statistical tests for those parameter estimates)\n  - There are still ways to use it to address explanatory questions (visualizations, model comparisons, feature importance)\n\n- Very simple but also powerful (listed commonly among top 10 algorithms)\n  - By powerful, it is quite flexible and can accommodate many varied DGPs without the need for much feature engineering with its predictors\n  - May not need most transformations of X or Y\n  - May not need to model interactions\n  - Still need to handle missing data, outliers, and categorical predictors\n\n-----\n\nK Nearest Neighbor\n\n- Algorithm \"memorizes\" the training set (**lazy learning**)\n  - Lazy learning is most useful for large, continuously changing datasets with few attributes (features) that are commonly queried (e.g., online recommendation systems)\n\n- Prediction for any new observation is based on $k$ most similar observations from the dataset\n  - $k$ provides direct control  over the bias-variance trade-off for this algorithm\n  \n-----\n\nTo better understand KNN let's simulate training data for three different DGPs (linear - y, polynomial - y2, and step - y3)\n\n\n::: {.cell}\n\n:::\n\n\n-----\n\nLet's start with a simple example where the DGP for Y is linear on one predictor (X)\n\nDGP: $y = rnorm(150, x, 10)$\n\nThis figure displays:\n\n - DGP\n - Prediction line from a simple linear model\n - Red lines to represent three new observations (X = 10, 50, 90) we want to make predictions for via a standard KNN\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-2-1.png){width=672}\n:::\n:::\n\n\n-----\n\n::: {.callout-important collapse=\"false\"}\n### Question: What would 5-NN predictions look like for each of these three new values of X in the figure above?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nFor x = 10, find the five observations that have X values closest to 10.  Average the \nY values for those 5 observations and that is your predicted Y associated with \nthat new value of X.  Repeat to make predictions for Y for any other value of X,\ne.g., 50, 90, or any other value\n```\n:::\n\n:::\n\n-----\n\nKNN can easily accommodate non-linear relationships between numeric predictors and outcomes without any feature engineering for predictors\n\nIn fact, it can flexibly handle **any** shape of relationship\n\nDGP: $y2 = rnorm(150, x^4 / 800000, 8)$\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-3-1.png){width=672}\n:::\n:::\n\n\n-----\n\nDGP: $y3 = if\\_else(x < 40, rnorm(150, 25, 10),  rnorm(150, 75, 10))$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-4-1.png){width=672}\n:::\n:::\n\n\n-----\n\n## The Hyperparameter k in KNN\n\nKNN is our first example of a statistical algorithm that includes a **hyperparameter**, in this case $k$\n\n- Algorithm hyperparameters differ from parameters in that they cannot be estimated while fitting the algorithm to the training set\n\n- They must be set in advance\n\n- `k = 5` is the default for `kknn()`, the engine from the `kknn` package that we will use to fit a KNN within `tidymodels`.  \n\n  - [$kknn()$](https://cran.r-project.org/web/packages/kknn/kknn.pdf) weights observations (neighbors) based on distance.  \n  - An option exists for unweighted as well but not likely used much (default is optimal weighting, use it!).\n  \n-----\n\nUsing the polynomial DGP above, let's look at a 5-NN yields\n\n- Note the new category of algorithm, new engine, and the need to set a mode (because KNN can be used for regression and classification)\n- We can look in the package documentation to better understand what is being done (`?kknn::train.kknn`).\n\n::: {.cell}\n\n```{.r .cell-code}\nnearest_neighbor() |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  translate()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nK-Nearest Neighbor Model Specification (regression)\n\nComputational engine: kknn \n\nModel fit template:\nkknn::train.kknn(formula = missing_arg(), data = missing_arg(), \n    ks = min_rows(5, data, 5))\n```\n\n\n:::\n:::\n\n\n-----\n\n- Set up simple feature engineering recipe and get training features (nothing happening but let's follow normal routine anyway)\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(y2 ~ x, data = data_trn_demo)\n\nrec_prep <- rec |> \n  prep(data_trn_demo)\n\nfeat_trn_demo <- rec_prep |> \n  bake(data_trn_demo)\n```\n:::\n\n\n-----\n\n- Fit 5NN\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_5nn_demo <- \n  nearest_neighbor() |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(y2 ~ ., data = feat_trn_demo)\n```\n:::\n\n\n-----\n\n- Get features for a validation set (a new sample using same polynomial DGP)\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val_demo <- rec_prep |> \n  bake(data_val_demo)\n```\n:::\n\n\n-----\n\n- Display 5NN predictions in validation \n\n  - KNN (with `k = 5`) does a pretty good job of representing the shape of the DGP (low bias)\n  - KNN displays some (but minimal) evidence of overfitting\n  - Simple linear model does not perform well (clear/high bias)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-10-1.png){width=672}\n:::\n:::\n\n\n-----\n\nLet's pause and consider our conceptual understanding of the impact of $k$ on the bias-variance trade-off\n\n::: {.callout-important collapse=\"false\"}\n### Question: How will the size of k influence model performance (e.g., bias, overfitting/variance)?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nSmaller values of k will tend to increase overfitting (and therefore variance \nacross training samples) but decrease bias.  Larger values of k will tend to decrease\noverfitting but increase bias.  We need to find the Goldilocks \"sweet spot\"\n```\n:::\n\n:::\n\n-----\n\n::: {.callout-important collapse=\"false\"}\n### Question: How will k = 1 perform in training and validation sets?\n\n::: {.cell}\n\n```{.html .cell-code  code-fold=\"true\" code-summary=\"Show Answer\"}\nk = 1 will perfectly fit the training set.  Therefore it is very dependent on the training \nset (high variance).  It will fit both the DGP and the noise in the training set.  \nClearly it will likely not do as well in validation (it will be overfit to training).  \nk needs to be larger if there is more noise (to average over more cases).  k needs \nto be smaller if the relationships are complex. (More on choosing k by resampling in \nunit 5.\n```\n:::\n\n:::\n\n-----\n\n`k = 1`\n\n- Fit new model\n\n- Recipe and features have not changed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_1nn_demo <- \n  nearest_neighbor(neighbors = 1) |>  # <1> \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(y2 ~ ., data = feat_trn_demo)\n```\n:::\n\n1. Set k with `neighbors = `\n\n-----\n\nVisualize prediction models in Train and Validation\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-14-1.png){width=672 height=5in}\n:::\n:::\n\n\n-----\n\nCalculate RMSE in validation for two KNN models\n\n`k = 1`\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val_demo$y2, \n         predict(fit_1nn_demo, feat_val_demo)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.91586\n```\n\n\n:::\n:::\n\n\n`k = 5`\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val_demo$y2, \n         predict(fit_5nn_demo, feat_val_demo)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8.387035\n```\n\n\n:::\n:::\n\n\n-----\n\nWhat if we go the other way and increase $k$ to 75\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_75nn_demo <- \n  nearest_neighbor(neighbors = 75) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(y2 ~ ., data = feat_trn_demo)\n```\n:::\n\n\n-----\n\nVisualize prediction models in Train and Validation\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-19-1.png){width=672 height=5in}\n:::\n:::\n\n\n-----\n\nCalculate RMSE in validation for three KNN models\n\n**This is the bias-variance trade-off in action**\n\n- `k = 1`  - high variance\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val_demo$y2, \n         predict(fit_1nn_demo, feat_val_demo)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.91586\n```\n\n\n:::\n:::\n\n\n- `k = 5`  - just right (well better at least)\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val_demo$y2, \n         predict(fit_5nn_demo, feat_val_demo)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8.387035\n```\n\n\n:::\n:::\n\n\n- `k = 75` - high bias\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val_demo$y2, \n         predict(fit_75nn_demo, feat_val_demo)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.34998\n```\n\n\n:::\n:::\n\n\n-----\n\n## Distance and Scaling in KNN\n\n### Defining \"Nearest\"\n\nTo make a prediction for some new observation, we need to identify the observations from the training set that are nearest to it\n\n- Need a distance measure to define \"nearest\"\n\n- IMPORTANT: We care only about:\n\n  - Distance between a validation observation and all the training observations\n  - Need to find the $k$ observations in training that are nearest to the validation observation (i.e., its neighbors)\n  - Distance is defined based on these observations' features, not their outcomes\n  \n- There are a number of different distance measures available (e.g., Euclidean, Manhattan, Chebyshev, Cosine, Minkowski)\n\n  - Euclidean is most commonly used in KNN\n\n-----\n\nEuclidean distance between any two points is an n-dimensional extension of the Pythagorean formula (which applies explicitly with 2 features/2 dimensional space).  \n\n$C^2 = A^2 + B^2$\n\n$C = \\sqrt{A^2 + B^2}$\n\n...where C is the distance between two points\n\n-----\n\nThe Euclidean distance between 2 points (p and q) in two dimensions (2 predictors, x1 = A, x2 = B)\n\n$Distance = \\sqrt{A^2 + B^2}$\n\n$Distance = \\sqrt{(q1 - p1)^2 + (q2 - p2)^2}$\n\n$Distance = \\sqrt{(2 - 1)^2 + (5 - 2)^2}$\n\n$Distance = 3.2$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-23-1.png){width=672}\n:::\n:::\n\n\n-----\n\nOne dimensional (one feature) is simply the subtraction of scores on that feature (x1) between p and q\n\n$Distance = \\sqrt{(q1 - p1)^2}$\n\n$Distance = \\sqrt{(2 - 1)^2}$\n\n$Distance = 1$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-24-1.png){width=672}\n:::\n:::\n\n\nN-dimensional generalization for n features:\n\n$Distance = \\sqrt{(q1 - p1)^2 + (q2 - p2)^2 + ... + (qn - pn)^2}$\n\n-----\n\nManhattan distance is also referred to as city block distance\n\n- Travel down the \"A\" street for 1 unit\n- Travel down the \"B\" street for 3 units\n- Total distance = 4 units\n\nFor two features/dimensions\n\n$Distance = |A + B|$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-25-1.png){width=672}\n:::\n:::\n\n\n-----\n\n`kknn()` uses Minkowski distance (see [Wikipedia](https://en.wikipedia.org/wiki/Minkowski_distance) or [less mathematical description](https://www.mikulskibartosz.name/minkowski-distance-explained/))\n\n- It is a more complex parameterized distance formula\n  - This parameter is called `p`, referred to as `distance` in `kknn()`\n- Euclidean and Manhattan distances are special cases where `p` = 2 and 1, respectively\n- **The default p in kknn() = 2 (Euclidean distance)**  \n- This default (like all defaults) can be changed when you define the algorithm using `nearest_neighbor()`\n\n-----\n\n### Scaling X\n\nDistance is dependent on scales of all the features.  We need to put all features on the same scale\n\n- Scale all features to SD = 1 (using `step_scale(all_numeric_predictors())`)\n- Range correct [0, 1] all features (using `step_range(all_numeric_predictors())`)\n\n-----\n\n### Categorical Predictors\n\nKNN requires numeric features (for distance calculation).\n\n- For categorical predictors, you will need to use dummy coding or other feature engineering that results in numeric features. \n- e.g., `step_dummy(all_nominal_predictors())`\n\n-----\n\n## KNN with Ames Housing Prices\n\nLet's use KNN with Ames\n\n- Train a model using only numeric predictors and `overall_qual` as numeric\n- Use the default `k = 5` algorithm\n- Set SD = 1 for all features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area + lot_area + year_built + garage_cars + overall_qual, \n         data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(overall_qual = as.numeric(overall_qual)) |> \n  step_scale(all_numeric_predictors()) # <1>\n```\n:::\n\n1.  Remember to take advantage of these selectors for easier code! See `?has_role` for more details\n\n-----\n\n- prep, bake\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |>\n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- Skim training features.  Note all SD = 1\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_trn |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_trn |\n|Number of rows           |1465     |\n|Number of columns        |6        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |6        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|       p0|       p25|      p50|       p75|      p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|--------:|---------:|--------:|---------:|---------:|-----:|--------:|\n|gr_liv_area   |         0|             1|      2.95|     1.00|     0.86|      2.21| 2.84e+00|      3.44|     11.03|  1.43|     5.19|\n|lot_area      |         0|             1|      1.24|     1.00|     0.18|      0.92| 1.15e+00|      1.39|     20.14| 11.20|   182.91|\n|year_built    |         0|             1|     66.48|     1.00|    63.40|     65.86| 6.65e+01|     67.45|     67.79| -0.54|    -0.62|\n|garage_cars   |         0|             1|      2.33|     1.00|     0.00|      1.31| 2.62e+00|      2.62|      5.23| -0.26|     0.10|\n|overall_qual  |         0|             1|      4.30|     1.00|     0.71|      3.54| 4.24e+00|      4.95|      7.07|  0.20|    -0.03|\n|sale_price    |         0|             1| 180696.15| 78836.41| 12789.00| 129500.00| 1.60e+05| 213500.00| 745000.00|  1.64|     4.60|\n\n\n:::\n:::\n\n\n-----\n\n- Skim validation features.  Note SD.  [Why not exactly 1?]{.red}\n\n::: {.cell}\n\n```{.r .cell-code}\nfeat_val |> skim_all()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |feat_val |\n|Number of rows           |490      |\n|Number of columns        |6        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |6        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|       p0|       p25|       p50|       p75|      p100|  skew| kurtosis|\n|:-------------|---------:|-------------:|---------:|--------:|--------:|---------:|---------:|---------:|---------:|-----:|--------:|\n|gr_liv_area   |         0|             1|      2.92|     0.95|     0.94|      2.24|      2.81|      3.38|      7.05|  0.92|     1.16|\n|lot_area      |         0|             1|      1.28|     1.27|     0.21|      0.92|      1.17|      1.44|     26.32| 15.64|   301.66|\n|year_built    |         0|             1|     66.47|     1.04|    63.23|     65.90|     66.61|     67.45|     67.79| -0.66|    -0.41|\n|garage_cars   |         0|             1|      2.27|     0.99|     0.00|      1.31|      2.62|      2.62|      5.23| -0.24|     0.22|\n|overall_qual  |         0|             1|      4.28|     0.98|     0.71|      3.54|      4.24|      4.95|      7.07|  0.00|     0.35|\n|sale_price    |         0|             1| 178512.82| 75493.59| 35311.00| 129125.00| 160000.00| 213000.00| 556581.00|  1.42|     2.97|\n\n\n:::\n:::\n\n\n-----\n\n- Fit 5NN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_5nn_5num <- \n  nearest_neighbor() |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerror_val <- bind_rows(error_val, \n                        tibble(model = \"5 numeric predictor 5nn\", \n                               rmse_val = rmse_vec(feat_val$sale_price, \n                                                   predict(fit_5nn_5num, feat_val)$.pred)))\n\nerror_val\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  model                                  rmse_val\n  <chr>                                     <dbl>\n1 simple linear model                      51375.\n2 4 feature linear model                   39903.\n3 4 feature linear model with YJ           41660.\n4 6 feature linear model w/ms_zoning       39846.\n5 7 feature linear model                   34080.\n6 8 feature linear model w/interaction     32720.\n7 10 feature linear model w/interactions   32708.\n8 5 numeric predictor 5nn                  32837.\n```\n\n\n:::\n:::\n\n\n- Not bad!\n\n-----\n\nKNN also mostly solved the linearity problem\n\n- We might be able to improve the linear models with better transformations of X and Y\n- However, this wasn't needed for KNN!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_truth(truth = feat_val$sale_price, \n           estimate = predict(fit_5nn_5num, feat_val)$.pred)\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/u3-knn-29-1.png){width=672}\n:::\n:::\n\n\n-----\n\nBut 5NN may be overfit. `k = 5` is pretty low\n\nAgain with `k = 20`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_20nn_5num <- \n  nearest_neighbor(neighbors = 20) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  model                                  rmse_val\n  <chr>                                     <dbl>\n1 simple linear model                      51375.\n2 4 feature linear model                   39903.\n3 4 feature linear model with YJ           41660.\n4 6 feature linear model w/ms_zoning       39846.\n5 7 feature linear model                   34080.\n6 8 feature linear model w/interaction     32720.\n7 10 feature linear model w/interactions   32708.\n8 5 numeric predictor 5nn                  32837.\n9 5 numeric predictor 20nn                 30535.\n```\n\n\n:::\n:::\n\n\n- That helped some\n\n----- \n\nOne  more time with `k = 50` to see where we are in the bias-variance function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_50nn_5num <- \n  nearest_neighbor(neighbors = 50) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   model                                  rmse_val\n   <chr>                                     <dbl>\n 1 simple linear model                      51375.\n 2 4 feature linear model                   39903.\n 3 4 feature linear model with YJ           41660.\n 4 6 feature linear model w/ms_zoning       39846.\n 5 7 feature linear model                   34080.\n 6 8 feature linear model w/interaction     32720.\n 7 10 feature linear model w/interactions   32708.\n 8 5 numeric predictor 5nn                  32837.\n 9 5 numeric predictor 20nn                 30535.\n10 5 numeric predictor 50nn                 31055.\n```\n\n\n:::\n:::\n\n\n- Too high, now we have bias......\n- We will learn a more rigorous method for selecting the optimal value for $k$ (i.e., **tuning** this hyperparameter) in unit 5\n\n-----\n\nTo better understand bias-variance trade-off, let's look at error across these three values of $k$ in train and validation for Ames\n\nTraining\n\n- Remember that training error would be 0 for `k = 1`\n- Training error is increasing as $k$ increases b/c it KNN is overfitting less (so its not fitting the noise in train as well)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_trn$sale_price, \n         predict(fit_5nn_5num, feat_trn)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19012.94\n```\n\n\n:::\n\n```{.r .cell-code}\nrmse_vec(feat_trn$sale_price, \n         predict(fit_20nn_5num, feat_trn)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27662.2\n```\n\n\n:::\n\n```{.r .cell-code}\nrmse_vec(feat_trn$sale_price, \n         predict(fit_50nn_5num, feat_trn)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31069.12\n```\n\n\n:::\n:::\n\n\n-----\n\nValidation\n\n- Validation error is first going down as $k$ increases (and it would have been very high for `k = 1`)\n- Bias is likely increasing a bit\n- But this is compensated by big decreases in overfitting variance\n- The trade-off is good for `k = 20` relative to 5 and 1\n- At some point, as $k$ increases the increase in bias outweighed the decrease in variance and validation error increased too.\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_vec(feat_val$sale_price, \n         predict(fit_5nn_5num, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32837.37\n```\n\n\n:::\n\n```{.r .cell-code}\nrmse_vec(feat_val$sale_price, \n         predict(fit_20nn_5num, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30535.04\n```\n\n\n:::\n\n```{.r .cell-code}\nrmse_vec(feat_val$sale_price, \n         predict(fit_50nn_5num, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31054.6\n```\n\n\n:::\n:::\n\n\n-----\n\nLet's do one final example and add one of our nominal variables into the model: `ms_zoning`\n\n- Need to collapse levels and then dummy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- \n  recipe(sale_price ~ gr_liv_area + lot_area + year_built + garage_cars + \n           overall_qual + ms_zoning, data = data_trn) |> \n  step_impute_median(garage_cars) |> \n  step_mutate(overall_qual = as.numeric(overall_qual)) |> \n  step_mutate(ms_zoning = fct_collapse(ms_zoning,\n                                 \"residential\" = c(\"res_high\", \"res_med\", \"res_low\"),\n                                 \"commercial\" = c(\"agri\", \"commer\", \"indus\"),\n                                 \"floating\" = \"float\")) |>\n  step_dummy(ms_zoning) |> \n  step_scale(all_numeric_predictors())\n```\n:::\n\n\n-----\n\n- prep, bake\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_prep <- rec |> \n  prep(data_trn)\n\nfeat_trn <- rec_prep |> \n  bake(data_trn)\n\nfeat_val <- rec_prep |> \n  bake(data_val)\n```\n:::\n\n\n-----\n\n- Fit \n\n::: {.cell}\n\n```{.r .cell-code}\nfit_20nn_5num_mszone <- \n  nearest_neighbor(neighbors = 20) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(sale_price ~ ., data = feat_trn)\n```\n:::\n\n\n-----\n\n- evaluate\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 2\n   model                                   rmse_val\n   <chr>                                      <dbl>\n 1 simple linear model                       51375.\n 2 4 feature linear model                    39903.\n 3 4 feature linear model with YJ            41660.\n 4 6 feature linear model w/ms_zoning        39846.\n 5 7 feature linear model                    34080.\n 6 8 feature linear model w/interaction      32720.\n 7 10 feature linear model w/interactions    32708.\n 8 5 numeric predictor 5nn                   32837.\n 9 5 numeric predictor 20nn                  30535.\n10 5 numeric predictor 50nn                  31055.\n11 5 numeric predictor 20nn with ms_zoning   30172.\n```\n\n\n:::\n:::\n\n\n- Now it helps.  \n- Might have to do with interactions with other predictors that we didn't model in the linear model\n- KNN automatically accommodates interactions.  Why?\n- This model is a bit more complex and might benefit further from higher $k$\n\n-----\n\nAs a teaser, here is another performance metric for this model - $R^2$.   Not too shabby!  Remember, there is certainly some irreducible error in `sale_price` that will put a ceiling on $R^2$ and a floor on RMSE\n\n::: {.cell}\n\n```{.r .cell-code}\nrsq_vec(feat_val$sale_price, \n        predict(fit_20nn_5num_mszone, feat_val)$.pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8404044\n```\n\n\n:::\n:::\n\n\nOverall, we now have a model that predicts housing prices with about 30K of RMSE and accounting for 84% of the variance.  I am sure you can improve on this!\n\n-----\n\n## Discussion\n\n### Announcements\n\n- Room change for two days\n  - Thursday, 2/15\n  - Thursday, 2/29\n  - Room 121\n  - If we like it......\n\n- Feedback - THANKS!\n  - consistent feedback will be implemented (as best I can!)\n  - captions\n  - vocabulary and concepts - new appendix\n  - use of web \"book\" - better thought of as lecture slides\n  - you can clone book_iaml.   Render to slides with your notes, render to pdf\n  - Use of questions for dicussion\n    - Didn't work to read directly\n    - Rank order based on frequency and importance\n    - Put some in slack\n    - Can't do all.  Ask in slack, ask in office hours or after discussion/lab\n\n- Reprex\n  - We need you to try to make reprex for help on application assignments\n  \n- Homework is basically same for unit 4\n  - New dataset - titanic\n  - Do EDA but we don't need to see it\n  - Fit KNN and RDA models (will learn about LDA, QDA and RDA in unit)\n  - Submit predictions.  Free lunch!\n  - And for this free lunch....\n  \n-----\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(here::here(path_data, \"lunch_003.csv\")) |> \n  print_kbl()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 20 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): name\ndbl (1): rmse_test\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:500px; overflow-x: scroll; width:100%; \"><table class=\"table table-striped table-condensed\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> name </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> rmse_test </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> Dong </td>\n   <td style=\"text-align:right;\"> 25495.53 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> Simental </td>\n   <td style=\"text-align:right;\"> 28733.22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> Phipps </td>\n   <td style=\"text-align:right;\"> 28794.84 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> Yang </td>\n   <td style=\"text-align:right;\"> 30420.01 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> Li </td>\n   <td style=\"text-align:right;\"> 31534.42 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> Yu </td>\n   <td style=\"text-align:right;\"> 31874.12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 32606.15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 33614.59 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 33877.07 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 33879.19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 34315.31 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 34692.22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 35034.74 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 35154.67 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 35683.85 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 36101.95 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 36266.80 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 36473.84 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 38974.43 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 42367.31 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n-----\n\n### Sources of error\n\n- What are two broad sources of error?\n- What are two broad sources of reducible error.  Describe what they are and factors that affect them?\n- Why do we need independent validation data to select the best model configuration? \n- Why do we need test data if we used validation data to select among many model configurations\n- What is RMSE?  Connect it to metric you already know?  How is it being used in lm (two ways)?; in knn (one way)?\n- How does bias and variance manifest when you look at your performance metric (RMSE) in training and validation sets?\n- Will the addition of new features to a (lm?) model always reduce RMSE in train? in validation?  Connect to concepts of bias and variance\n\n-----\n\n### KNN \n\n- How does KNN use training data to make predictions\n- What is k and how does it get used when making predictions?\n- What is the impact of k on bias and variance/overfitting?\n- k=1: performance in train? in val?\n- Distance measures: use Euclidean (default in kknn)!\n- Tuning K:  stay \"tuned\"\n\n-----\n\n### Interaction in KNN - Consider bias first (but also variance) in this example\n\n- Simulate data\n- Fit models for lm and knn with and without interaction\n- Took some shortcuts (no recipe, predict back into train)\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 200\nset.seed(5433)\n\nd <- tibble(x1 = runif(n, 0,100), # uniform\n               x2 = rep(c(0,1), n/2), # dichotomous\n               x1_x2 = x1*x2, # interaction\n               y = rnorm(n, 0 + 1*x1 + 10*x2 + 10* x1_x2, 20)) #DGP + noise\n\nfit_lm <- \n  linear_reg() |>   \n  set_engine(\"lm\") |>   \n  fit(y ~ x1 + x2, data = d)\n\nfit_lm_int <- \n  linear_reg() |>   \n  set_engine(\"lm\") |>   \n  fit(y ~ x1 + x2 + x1_x2, data = d)\n\nfit_knn <- \n  nearest_neighbor(neighbors = 20) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(y ~ x1 + x2, data = d)\n\nfit_knn_int <- \n  nearest_neighbor(neighbors = 20) |>   \n  set_engine(\"kknn\") |>   \n  set_mode(\"regression\") |> \n  fit(y ~ x1 + x2 + x1_x2, data = d)\n\nd <- d |> \n  mutate(pred_lm = predict(fit_lm, d)$.pred,\n         pred_lm_int = predict(fit_lm_int, d)$.pred,\n         pred_knn = predict(fit_knn, d)$.pred,\n         pred_knn_int = predict(fit_knn_int, d)$.pred)\n```\n:::\n\n\n-----\n\n- Predictions from linear model with and without interaction\n  - You NEED interaction features with LM\n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n  ggplot(aes(x = x1, group = factor(x2), color = factor(x2))) +\n    geom_line(aes(y = pred_lm)) +\n    geom_point(aes(y = y)) +\n    ggtitle(\"lm without interaction\") +\n    ylab(\"y\") +\n    scale_color_discrete(name = \"x2\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n\n```{.r .cell-code}\nd |> \n  ggplot(aes(x = x1, group = factor(x2), color = factor(x2))) +\n    geom_line(aes(y = pred_lm_int)) +\n    geom_point(aes(y = y)) +\n    ggtitle(\"lm with interaction\") +\n    ylab(\"y\") +\n    scale_color_discrete(name = \"x2\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-64-2.png){width=672}\n:::\n:::\n\n\n-----\n\n- Predictions from KNN with and without interaction\n  - You do NOT need interaction features with KNN!\n    \n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n  ggplot(aes(x = x1, group = factor(x2), color = factor(x2))) +\n    geom_line(aes(y = pred_knn)) +\n    geom_point(aes(y = y)) +\n    ggtitle(\"KNN without interaction\") +\n    ylab(\"y\") +\n    scale_color_discrete(name = \"x2\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n\n```{.r .cell-code}\nd |> \n  ggplot(aes(x = x1, group = factor(x2), color = factor(x2))) +\n    geom_line(aes(y = pred_knn_int)) +\n    geom_point(aes(y = y)) +\n    ggtitle(\"KNN with interaction\") +\n    ylab(\"y\") +\n    scale_color_discrete(name = \"x2\")\n```\n\n::: {.cell-output-display}\n![](003_regression_files/figure-html/unnamed-chunk-65-2.png){width=672}\n:::\n:::\n\n\n-----\n\n### LM vs. KNN better with some predictors or overall?\n\n- \"Why do some features seem to improve performance more in linear models or only in KNNs?\"\n- \"What are some contexts where KNN doesn't work well? In other words, what are the advantages/disadvantages of using KNN?\"\n  - Always comes down to bias vs. variance\n  - Flexibility and N are key moderators of these two key factors.  \n  - k? - impact on bias, variance?\n- KNN for explanation?\n  - Visualizations (think of interaction plot above) make clear the effect\n  - Will learn more (better visualizations, variable importance, model comparisons) in later unit\n\n-----\n\n### Normalizing transformations - Yeo Johnson\n  - when needed for lm?\n  - when needed for knn?\n\n-----\n\n### Dummy coding\n\n- Why do we do it?\n- Describe the values assigned to the dummy coded features\n- Why these values? In other words, how can you interpret the effect of a dummy coded feature?\n- How is it different from one-hot coding.  When to use or not use one-hot coding? \n\n-----\n\n### Exploration \n\n- \"I feel that I can come up with models that decrease the RMSE, but I don't have good priors on whether adding any particular variable or observation will result in an improved model. I still feel a little weird just adding and dropping variables into a KNN and seeing what gets the validation RMSE the lowest (even though because we're using validation techniques it's a fine technique)\"\n  - Exploration is learning.  This is research.  If you knew the answer you wouldn't be doing the study\n  - Domain knowledge is still VERY important\n  - Some algorithms (LASSO, glmnet) will help with feature selection\n  - staying organized\n    - Script structure\n    - Good documentation - QMD as analysis notebook\n  - Some overfitting to validation will occur? Consequence?  Solutions?\n\n-----\n\n### \"Curse of dimensionality\" - Bias vs. variance\n\n- Missing features produce biased models.\n- Unnecessary features or even many features relative to N produce variance\n- Does your available N in your algorithm support the features you need to have low bias. \n  - Mostly an empirical question - can't really tell otherwise outside of simulated data. Validation set is critical!\n  - Flexible models often need more N holding features constant\n  - Regularization (unit 6) will work well when lots of features \n\n-----\n\n### Transformations of numeric predictors\n\n- Use of `plot_truth()` [predicted vs. observed]\n\n- Residuals do not have mean of 0 for every $\\hat{y}$\n  - Consequence: biased parameter estimates.  Linear is bad DGP\n  - Also bad test of questions RE the predictor (underestimate? misinform)\n    \n- Non-normal residuals\n  - Consequence: lm parameter estimates still unbiased (for linear DGP) but more \"efficient\" solutions exist\n  - Bad for prediction b/c higher variance than other solutions\n  - May suggest omission of variables\n  \n- Heteroscasticity\n  - Consequence: Inefficient and inaccurate standard errors.\n  - Statistical tests wrong\n  - Poor prediction for some (where larger variance of residuals) $\\hat{y}$\n  - higher variance overall than other solutions - bad again for prediction\n  \n- Transformation of outcome?  \n  - metric\n  - back to raw predictions\n\n-----\n\n### \"In GLM, why correlation/collinearity among predictors will cause larger variance? Is it because of overfitting?\"\n\n### KNN (black box) for explanatory purposes\n\n",
    "supporting": [
      "003_regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}