---
title: "Dummy Coding Nominal (and Some Ordinal) Predictors"
format: 
  html: 
    embed-resources: true
editor_options: 
  chunk_output_type: console
---   

## Issues with Novel Levels in Held-Out Set
When you have nominal/ordinal predictors that have levels that are infrequent, you will occassionally find that an infrequent level appears in your held out set (i.e., validation or test) but not in your training set.  This can cause problems when you try to make predictions for these new values.  Specifcally, the feature values for this level will be set to NA and therefore, you will get predictions of NA for these observations. 

In this appendix, we demonstrate this problem and our preferred solution given our workflow of classing all nominal/ordinal predictors as factors in our dataframes.

```{r}
#| include: false
options(conflicts.policy = "depends.ok")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
tidymodels_conflictRules()
```

```{r}
#| message: false
library(tidyverse) 
library(tidymodels) 
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
```

Make simple data sets with an outcome (`y`) and one nominal predictor (`x`).  Note that `x` will have a novel value (`foo`) in the test set that wasnt present in the training set.
```{r}
n <- 6
data_trn <- tibble(y = rnorm(n), 
                   x = rep (c("a", "b", "c"), n/3)) |>
  mutate(x = factor(x, levels = c("a", "b", "c"))) |> 
  print()

data_test <- tibble(y = c(rnorm(n), rnorm(1)),
                    x = c(rep (c("a", "b", "c"), n/3), "foo")) |> 
  mutate(x = factor(x, levels = c("a", "b", "c", "foo"))) |> 
  print()
```

Make a recipe
```{r}
rec <- recipe(y ~ x, data = data_trn) %>% 
  step_dummy(x)
```

Prep the recipe with training data
```{r}
rec_prep <- rec |> 
  prep(data_trn)
```

Features for training set.  No problems 
```{r}
feat_trn <- rec_prep |> 
  bake(data_trn)

feat_trn |> skim_all()
```

Features for test set.  

- Now we see the problem indicated by the warning about new level in test.
- We see that one observation is missing for `x` in test.  If we looked closer, we would see this is the observation for `foo`
```{r}
feat_test <- rec_prep |> 
  bake(data_test)

feat_test |> skim_all()
```

We solve this problem but just making sure this level was listed when we created the factor in training (e.g., use this mutate earlier when classing `x` in `data_trn`: `mutate(x = factor(x, levels = c("a", "b", "c", "foo")))`.  

Or we can add the level after the fact, when we discover the problem (as below).

```{r}
data_trn1 <- data_trn |> 
  mutate(x = factor(x, levels = c("a", "b", "c", "foo")))
```

Now prep recipe with this updated training set that includes `foo` level
```{r}
rec_prep1 <- rec |> 
  prep(data_trn1)
```

Features for training as before

- We now have a feature for this new level
- It is set to 0 for all observations (because there are no observations with a value of `foo` in training set)
```{r}
feat_trn1 <- rec_prep1 |> 
  bake(data_trn1)

feat_trn1 |> skim_all()
```

Now there is no problem when we find this value for an observation in the test set.
```{r}
feat_test1 <- rec_prep1 |> 
  bake(data_test)

feat_test1 |> skim_all()
```

All is good.  BUT, there are still some complexities when we fit this model in train and predict into test.  In training, the `x_foo` feature is a constant (all 0) so this will present some issues for some statistical algorithms.  Lets see what happens when we fit a linear model and use it to  predict into test.

```{r}
fit1 <-
  linear_reg() %>% 
  set_engine("lm") %>% 
  fit(y ~ ., data = feat_trn1)
```

If we look at the parameter estimates, we see that the algorithm was unable to estimate a parameter for `x_foo` because it was a constant in train

```{r}
fit1 %>% tidy()
```

This will generate a warning (*"prediction from a rank-deficient fit has doubtful cases"*) when you use this model to make predictions for values it didnt see in the training set.

- The consequence is that the model will predict a `y` value associated with the reference level (coded 0 for all  other dummy features) for all `foo` observations.  This is probably the best we can do for these new (previously unseen) values for x.
- also note that the column name for predictions, which is usually called `.pred`, is now called `.pred_res`.  You will need to accomodate this in your code as well.  Just rename it.
```{r}
predict(fit1, feat_test1) |>  
  bind_cols(feat_test1)
```

This is our preferred solution when new/previously unseen values exist in held out data.  A comparable solution is offered as a recipe step.  See `step_novel()`


## step_other()

```{r}
#| echo: false
?step_other
```

## step_unknown()

```{r}
#| echo: false
?step_unknown
```

